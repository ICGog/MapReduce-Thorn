module urilib{
  
  /**
   * Parses a querystring: f=foo&b=bar
   *
   * Returns:
   *   list of {: name, value :} queries.
   */
  fun parse_query(qs){
    pairs = qs.split("&");
    return split_attribute_value_pairs(pairs).lst();
  }

  fun parse_header(header){
    kv = header.split(":");
    return {: k:kv(0).trim(), v:kv(1).trim() :};
  }

  /**
   * Parses a header, e.g., cookie attribute-value string: f=foo; b=bar 
   */
  fun parse_header_value(value){
    pairs = value.split(";");
    return split_attribute_value_pairs(pairs).lst();
  }

  javaly fun parse_multipart_(content_type, content) = magne.MimeMultipartParser.parseMultipart;

  fun parse_multipart(content_type, content){
    import webdict.*;
    
    l = parse_multipart_(content_type, content);
    contents = ord();

    var i := 0;
    while(i < l.len()){
      // content-disposition header
      headers = HttpHeadersDict(l(i));
      value = HeaderValueDict(headers.get('content-disposition'));
      
      contents @= {: 
                   attribute: value.get('name'), 
                   content: {: headers, value:l(i+1):} :};
      i := i+2;
    }
    return contents.lst();
  }
  
  fun split_attribute_value_pairs(pairs){

    // add an empty string if there was a match at the end, like Python split.
    fun split(s){
      result = s.split('=');
      if(s.endsWith?('=')){
        return result @ [''];
      }
      else{
        return result;
      }
    }

    fun isQuoted(s){
      if(s.len() > 1){
        return true if s(0) == '"' && s(s.len()-1) == '"' else false;
      }
      else{
        return false;
      }
    }

    r = ord();
    for(name_value <- pairs){
      nv = split(name_value);

      if(nv.len() == 0){
        continue;
      }      
      else if(nv.len() == 1){
        r @= {: attribute: decode(nv(0).trim().replace('+', '')), value:null :};
      }
      else{
        var value := nv(1).trim();
        if(isQuoted(value)){
          value := value.butleft(1).butright(1);
        }
        r @= {: attribute: decode(nv(0).trim().replace('+', ' ')), value: decode(value.replace('+', ' ')) :};
      }
    }
    return r;
  }

  fun pad(hex){
    if(hex.len() == 1){
      return "0$hex";
    }
    return hex;
  }

  var hex2chr := null;
 
  fun lazy_hex2chr(){
    if(hex2chr ~ !+_){
      hex2chr := map();
      for(i <- 0..255){
        hex = pad(i.strHex());
        hex2chr[ hex ] := i.char().str();
        // 0D and 0d ...
        hex2chr[ hex.toUpper() ] := i.char().str();
      }
    }
    return hex2chr;
  }

  fun decode(value){
    result = ord();
    splitted = value.split('%');
    result @= splitted(0);
    // 1..1 one iteration!
    for(i <- 1..splitted.len()-1){
      s = splitted(i);
      // Lookup the two first chars (the hex) after % 
      result @= lazy_hex2chr()[s.sub(0,1)] + s.butleft(2);
    }
    return "".join(result);
  }
}
