spawn wif {
  // Web InterFace to, um, a table thingie.
  import HTTP.*;
  import XML.*;
  host = "localhost"; // "localhost";
  tome = table(k){saying; var plusVotes, minusVotes;};
  var nWisdoms := 0;
  
  fun newWisdom(wisdom) {
    nWisdoms += 1;
    tome(nWisdoms) := {: saying: wisdom, plusVotes: 0, minusVotes: 0 :};
    }
  
  fun prior_wisdom() {
    newWisdom("I like glass!");
    newWisdom("Do not put weasels or other sharp and pointy mammals down your pants.");
    newWisdom("An investment in knowledge always pays the best interest.");
    newWisdom("Oft evil will evil mar.");
  }
  
  fun homePageWith(req, msg, keyword){
println("host=$host msg=$msg");
    say = "web-cheeper-home-page.html".file.contents
             .replace(">>>HOST<<<", host)
             .replace(">>>MSG<<<",msg)
             .replace(">>>TBL<<<", wisdomTable(keyword));
    req.respond(OK, say, {::});
  }
  
  fun dealWith(req, m && {:say, wisdom:}) {
println("DealWith1: $m");
      newWisdom(wisdom);     
      homePageWith(req, "We thank you for your wisdom (#$nWisdoms).", "");
    }
    | dealWith(req, m && {:list:_, wisdom: keyword:}) {
println("DealWith2: $m");
      homePageWith(req, "Chirps about $keyword", keyword);
    }
    | dealWith(req && HTTPRequest(_,_,s), m && {: vote: sgn :}) {
println("DealWith3: $m");
      "/vote/([0-9]+).*" / [.int(n)] = s;
      countVote(req, n, sgn == "+");
    }
    | dealWith(req, other) {
println("DealWith4: $other");
      homePageWith(req, "", "");
    }
  

  fun countVote(req, n, plus) {
      if(tome(n) ~ +_) {
        if (plus)
          tome(n).plusVotes += 1;
        else 
          tome(n).minusVotes -= 1;
        }
      homePageWith(req, "", "");
  }countVote

  fun wisRow({:k, saying, plusVotes, minusVotes:}) {
    import HTML.*;
    tr([
      td(k),
      td(saying),
      td([vote(true,k, plusVotes)]),
      td([vote(false,k, minusVotes)])
      ]);
  }
  
  fun vote(plus, k, nVotes) {
    pk = "+" if plus else "-";
    Elem("form", {:method:"get", action:"http://$host:4121/vote/$k":}, [
      nVotes.str,
      Elem("input", {:type:"submit", name:"vote", value: pk:}, [])
      ]);
  }vote
  
  fun love({:plusVotes, minusVotes:}) = plusVotes + minusVotes;
  
  fun wisTab(keyword) {
    Elem("table", {:border:1:}, 
     %sort[wisRow(wis) %> love(wis) %< wis.k | for wis <- tome, if wis.saying.contains?(keyword)]);     
  }
  
  fun wisdomTable(keyword) {
     import HTML.*;
     resp = 
     Elem("html", {::}, [
       Elem("head", {::}, [Elem("title", {::}, ["The Listing of Wisdom"])]),
       Elem("body", {::}, [
          wisTab(keyword)
       ])
     ]);
     text = resp.str();
  }wisdomTable
  
 


  body{
    sock = HTTPSocketeer(4121);
    var goon := true;
    println("Web Cheeper starting");
    prior_wisdom();
    while(goon) {
      recv{
        req && HTTPRequest("GET", params, _) from whoever => {
           println("Yow, $whoever wants to do $params");
           dealWith(req, params);
        }
      | other => {
          println("WTF is $other?");
        }
      }
    }while
    println("Web Cheeper quitting.");
  }body
}wif;
