module PROFILE {
  fun registry() = site("thorn://localhost:5555");


  fun sum([]) = 0;
     | sum([x,y...]) = x + sum(y);

   class Profile(interests) : pure {
     def compatible?(other, threshold:int) = other != null &&
        this.compat?(other, threshold) && other.compat?(this,threshold);
     def likes?(topic) = %exists(t == topic | for {: topic:t :} <- interests);
     def compat?(other:Profile, threshold:int){
       matches = %[weight
        | for {:topic, weight:} <- interests,
          if other.likes?(topic)];
       sum(matches) >= threshold;
     }
   }
}PROFILE

module AGENCY {
 component Agency(agency, threshold, ad, venus) {
    import PROFILE.*;

    customers = table(name){ val source, profile; var picked;};
    var done := false;

    async stop() { done := true; }

    sync register(name, profile) from sender {
       customers(name) :=  {:source:sender, name, profile, picked: [name]:};
       "Welcome to $agency, $name.";
    }

    sync matchFor(name) {
       if (customers(name) ~ +r) return findMatchFor(r);
       else {: fail: "Please register first!" :};
    }

    fun findMatchFor({:profile, name, picked:}) {
         first(
           for {:profile: profile', name: name':} <~ customers,
           if  profile.compatible?(profile', threshold) && ! (name' in picked)
         ){
            customers(name).picked := name' :: picked;
            return {: date: name' :};
         }
         else {
           {: fail: "Sorry, no more dates":};
         }
    }

   body{
     registry() <-> register(agency, ad);
     until(done) serve;
    }
   }Agency;
}AGENCY
