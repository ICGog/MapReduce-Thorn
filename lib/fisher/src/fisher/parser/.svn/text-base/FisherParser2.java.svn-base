/* Generated By:JavaCC: Do not edit this line. FisherParser2.java */
package fisher.parser;
import fisher.desugar.*;
import fisher.syn.*;
import fisher.syn.core.*;
import fisher.syn.interfaces.*;
import fisher.syn.converters.*;
import fisher.util.FisherSource;
import java.util.*;
import fisher.util.FisherException;
import static fisher.util.Bard.*;
import fisher.runtime.*;
public class FisherParser2 implements FisherParser2Constants {

   public static ParseException error(Token start, Token end, Object msg, Object ... stuffs)
   throws ParseException {
      throw new ParseException(
        msg
        + (start != null ? "\n starting at line " + start.beginLine + ", column "  +start.beginColumn : "")
        + (end != null ? "\n ending at line " + end.endLine + ", column " + end.endColumn : "")
        + "\n"
        + sep(stuffs, "\n")
        );
   }

   public static FisherParser2 current;

   public static CmdToPat dworkin = new CmdToPat();

   public FisherSource source;

   public Pat pattern(Cmd cmd) throws ParseException {
      try {
         dworkin.source = source;
         Pat pat = cmd.accept(dworkin, "unicorn");
         if (pat == null) {
           throw error(cmd.start, cmd.end,
             "Can't convert this expression to pattern " + cmd + "\n "
             + dworkin.reasonForFailure
             );
         }
         else {
           return pat;
         }
     }
     catch(FisherException fe) {
         throw error(cmd.start, cmd.end,
           fe.toString() + dworkin.reasonForFailure
           );
     }
   }

   public static CmdToAssignmentTarget cheney = new CmdToAssignmentTarget();
   public static AssignTarget assignTarget(Cmd cmd) throws ParseException {
      AssignTarget at = cmd.accept(cheney, "abbreviate!");
      if (at == null) {
         throw error(cmd.start, cmd.end,
           "Can't convert this expression to an assignment target: " + cmd);
      }
      else {
        return at;
      }
   }

   // Throw a parse exception if the token isn't one of: 
   // "}"
   // "}ids[0]"
   // "}ids[1]"
   // etc
   public static void requireClose(Token token, String... ids) throws ParseException {
      String t = token.image;
      if ("}".equals(t)) return;
      for(String id : ids) {
         if (t != null && t.equals("}" + id)) return;
      }
      throw error(token, token,
        "Closing bracket must have id equal to " + sep(ids, " or ")
           + ", not " + t  + ".",
        t);
   }

   public static void requireEek(Token assigner, ColAccess colac) throws ParseException {
     boolean good = colac.op.equals(assigner.image);
     if (!good) {
       throw error(assigner, assigner,
         "Wrong syntax for assigning/binding.",
         "This is a " + colac.whatis + " and needs a '" + colac.op + "'."
         );
     }
   }

   public static Id tok2id(Token token) throws ParseException {
      return new Id(token);
   }

   public static Cmd rassoc(Op op, List<? extends Cmd> operands) {
      int n = operands.size();
      assert(n > 1);
      Cmd e = operands.get(n-1);
      for(int i = n-2; i >= 0; i--) {
         Cmd f = operands.get(i);
         e = new OpExp(f.start, e.end, op, list(f, e));
      }
      return e;
   }

////////////////////////////////////////////////////////////////
// Common Stuff
////////////////////////////////////////////////////////////////
  final public Token SkipSemi(Token end) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      end = jj_consume_token(SEMI);
    }
   {if (true) return end;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////SkipSemi
  final public Id Id() throws ParseException {
    Token tok;
    String name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID1:
      tok = jj_consume_token(ID1);
   name = tok.image;
      break;
    case ID2:
      tok = jj_consume_token(ID2);
   name =  tok.image.substring(1, tok.image.length()-1);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   if (!Id.isAcceptableIdName(name)) {
    {if (true) throw error(tok, tok, Id.messageAbout(name));}
  }
   {if (true) return new Id(tok,name);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Id
  final public Id MethodNameId() throws ParseException {
    Token tok;
    Id id;
    id = Id();
             {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////MethodNameId
  final public List<Id> Ids() throws ParseException {
    Id id;
    List<Id> L = Collections.EMPTY_LIST;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID1:
    case ID2:
      id = Id();
                L = list(id);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        id = Id();
                   L.add(id);
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
   {if (true) return L;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Ids
  final public Token Rbrace() throws ParseException {
    Token end;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      end = jj_consume_token(RBRACE);
      break;
    case CLOSE_ID:
      end = jj_consume_token(CLOSE_ID);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return end;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Rbrace
  final public Token RbraceOf(String s) throws ParseException {
    Token end;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      end = jj_consume_token(RBRACE);
      break;
    case CLOSE_ID:
      end = jj_consume_token(CLOSE_ID);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   requireClose(end, s);
   {if (true) return end;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Rbrace
  final public Token RbraceOf2(String s1, String s2) throws ParseException {
    Token end;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      end = jj_consume_token(RBRACE);
      break;
    case CLOSE_ID:
      end = jj_consume_token(CLOSE_ID);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   requireClose(end, s1, s2);
   {if (true) return end;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Rbrace
  final public QualName QualName(int minLength) throws ParseException {
    Id id, first;
    List<Id> ids = null;
    id = Id();
             ids = list(id); first = id;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(DOT);
      id = Id();
                     ids.add(id);
    }
    if (ids.size() < minLength) {
      {if (true) throw error(first.start, id.end, "This qualified name ("
        + sep(ids, ".")
        + ") must have at least "
        + minLength + " elements, but it has only " + ids.size());}
    }
    {if (true) return new QualName(first.start, id.end, ids);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QualName
  final public QualName TypeNameAsQualName() throws ParseException {
    Token it;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORD:
      it = jj_consume_token(ORD);
      break;
    case TABLE:
      it = jj_consume_token(TABLE);
      break;
    case FN:
      it = jj_consume_token(FN);
      break;
    case PURE:
      it = jj_consume_token(PURE);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new QualName(it, it, list( new Id(it)));}
    throw new Error("Missing return statement in function");
  }

 //////////////////////TypeNameAsQualName
  final public boolean Purity() throws ParseException {
    boolean pure = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      jj_consume_token(PURE);
                   {if (true) return true;}
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
   {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Purity
  final public Formals Formals() throws ParseException {
    Token start, end;
    Cmd exp;
    Pat pat;
    Id id;
    List<Pat> formals = null;
    if (jj_2_2(2147483647)) {
      exp = SquishedExp();
     formals = list(pattern(exp));
     start = exp.start; end = exp.end;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        start = jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
        case ELLIPSIS:
        case PLUS:
        case LPAREN:
        case LBRACKET:
        case LBRACE:
        case MINUS:
        case LRECBRACE:
        case DOLLARLPAREN:
        case PROBE:
        case WILD:
        case METHODLY1:
        case TABLE:
        case QUERYSWISS:
        case FIRST:
        case QUERYAFTER:
        case QUERYLIST:
        case COUNT:
        case EVERY:
        case SOME:
        case QUERYSORT:
        case QUERYTABLE:
        case QUERYGROUP:
        case VALOF:
        case OBJECT:
        case THIS:
        case SPAWN:
        case IT:
        case NOT:
        case SUPER:
        case MAP:
        case ORD:
        case NULL:
        case TRUE:
        case FALSE:
        case HEXINT:
        case OCTINT:
        case BININT:
        case ID1:
        case ID2:
        case INT:
        case FLOAT:
        case STRING2:
        case STRING1:
        case STRING4:
        case STRING3:
          pat = Pat();
                   formals = list(pat);
          label_4:
          while (true) {
            if (jj_2_1(3)) {
              ;
            } else {
              break label_4;
            }
            jj_consume_token(COMMA);
            pat = Pat();
                     formals.add(pat);
          }
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
     if (formals == null) formals = Collections.EMPTY_LIST;
        end = jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return new Formals(start, end, formals);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Formals
  final public Pat Pat() throws ParseException {
    Cmd e;
    Pat p;
    e = CompactExp();
   {if (true) return pattern(e);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Pat

////////////////////////////////////////////////////////////////
// Cmd and its variants.
////////////////////////////////////////////////////////////////
  final public Cmd StmtForInsideParens() throws ParseException {
    Cmd e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case UNLESS:
      e = If();
      break;
    case MATCH:
      e = Match();
      break;
    case RECV:
      e = Recv();
      break;
    case TRY:
      e = Try();
      break;
    case THROW:
      e = Throw();
      break;
    case QIF:
      e = QueryIf();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////StmtForInsideParens
  final public Cmd StmtButNotBraced() throws ParseException {
    Cmd e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QIF:
    case THROW:
    case TRY:
    case MATCH:
    case IF:
    case UNLESS:
    case RECV:
      e = StmtForInsideParens();
      break;
    case FUN:
      e = FunDecl();
      break;
    case IMPORT:
      e = ImportStmt();
      break;
    case ALIAS:
      e = Alias();
      break;
    case BREAK:
      e = Break();
      break;
    case CONTINUE:
      e = Continue();
      break;
    case VAR:
      e = VarDecl();
      break;
    case NEW:
      e = SuperCtorCall();
      break;
    case RETURN:
      e = Return();
      break;
    case SERVE:
      e = Serve();
      break;
    case DOT:
    case ELLIPSIS:
    case PLUS:
    case LPAREN:
    case LBRACKET:
    case LBRACE:
    case MINUS:
    case LRECBRACE:
    case DOLLARLPAREN:
    case PROBE:
    case WILD:
    case METHODLY1:
    case TABLE:
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
    case VALOF:
    case OBJECT:
    case THIS:
    case SPAWN:
    case IT:
    case NOT:
    case SUPER:
    case MAP:
    case ORD:
    case FN:
    case NULL:
    case TRUE:
    case FALSE:
    case FOR:
    case WHILE:
    case SIGNATURE:
    case DO:
    case UNTIL:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      e = StmtsWhichCanStartWithId();
      break;
    case CLASS:
      e = ClsDecl();
      break;
    case COMPONENT:
      e = ComponentDecl();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////StmtButNotBraced
  final public Cmd Stmt(String tag1,String tag2) throws ParseException {
  Cmd e;
    if (jj_2_3(4)) {
      e = SeqOf2(tag1, tag2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case ELLIPSIS:
      case PLUS:
      case LPAREN:
      case LBRACKET:
      case LBRACE:
      case MINUS:
      case LRECBRACE:
      case DOLLARLPAREN:
      case PROBE:
      case WILD:
      case METHODLY1:
      case TABLE:
      case QUERYSWISS:
      case FIRST:
      case QIF:
      case QUERYAFTER:
      case QUERYLIST:
      case COUNT:
      case EVERY:
      case SOME:
      case QUERYSORT:
      case QUERYTABLE:
      case QUERYGROUP:
      case VALOF:
      case COMPONENT:
      case CLASS:
      case OBJECT:
      case THIS:
      case NEW:
      case SPAWN:
      case IT:
      case SERVE:
      case ALIAS:
      case IMPORT:
      case NOT:
      case SUPER:
      case MAP:
      case ORD:
      case BREAK:
      case CONTINUE:
      case FUN:
      case FN:
      case THROW:
      case TRY:
      case NULL:
      case TRUE:
      case FALSE:
      case VAR:
      case MATCH:
      case IF:
      case UNLESS:
      case FOR:
      case WHILE:
      case SIGNATURE:
      case DO:
      case UNTIL:
      case RETURN:
      case RECV:
      case HEXINT:
      case OCTINT:
      case BININT:
      case ID1:
      case ID2:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        e = StmtButNotBraced();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Stmt
  final public Cmd StmtWithOptSemi(String tag1,String tag2) throws ParseException {
  Cmd e;
    if (jj_2_4(5)) {
      e = SeqOf2(tag1, tag2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        jj_consume_token(SEMI);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case ELLIPSIS:
      case PLUS:
      case LPAREN:
      case LBRACKET:
      case LBRACE:
      case MINUS:
      case LRECBRACE:
      case DOLLARLPAREN:
      case PROBE:
      case WILD:
      case METHODLY1:
      case TABLE:
      case QUERYSWISS:
      case FIRST:
      case QIF:
      case QUERYAFTER:
      case QUERYLIST:
      case COUNT:
      case EVERY:
      case SOME:
      case QUERYSORT:
      case QUERYTABLE:
      case QUERYGROUP:
      case VALOF:
      case COMPONENT:
      case CLASS:
      case OBJECT:
      case THIS:
      case NEW:
      case SPAWN:
      case IT:
      case SERVE:
      case ALIAS:
      case IMPORT:
      case NOT:
      case SUPER:
      case MAP:
      case ORD:
      case BREAK:
      case CONTINUE:
      case FUN:
      case FN:
      case THROW:
      case TRY:
      case NULL:
      case TRUE:
      case FALSE:
      case VAR:
      case MATCH:
      case IF:
      case UNLESS:
      case FOR:
      case WHILE:
      case SIGNATURE:
      case DO:
      case UNTIL:
      case RETURN:
      case RECV:
      case HEXINT:
      case OCTINT:
      case BININT:
      case ID1:
      case ID2:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        e = StmtButNotBraced();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Stmt
  final public Cmd StmtsWhichCanStartWithId() throws ParseException {
    Cmd e;
    if (jj_2_5(3)) {
      // 
          e = CommandlikeExp();
      jj_consume_token(SEMI);
    } else if (jj_2_6(3)) {
      e = While();
    } else if (jj_2_7(3)) {
      e = For();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIGNATURE:
      case ID1:
      case ID2:
        e = Signature();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////StmtsWhichCanStartWithId



////////////////////////////////////////////////////////////////
// The Exp hierarchy
////////////////////////////////////////////////////////////////
  final public Cmd CommandlikeExp() throws ParseException {
    Cmd e;
    e = ExpA();
              {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpA
  final public Cmd CompactExp() throws ParseException {
    Cmd e;
    e = ExpM();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////CompactExp
  final public Cmd SquishedExp() throws ParseException {
    Cmd e;
    e = ExpZ1();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////SquishedExp()
  final public Cmd ExpOrBlock() throws ParseException {
    Cmd e;
    if (jj_2_8(5)) {
      e = CompactExp();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        e = Seq();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpOrBlock
  final public Cmd ExpOrBlockOf(String s) throws ParseException {
    Cmd e;
    if (jj_2_9(5)) {
      e = CompactExp();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        e = SeqOf(s);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpOrBlock
  final public Cmd BiggishExp() throws ParseException {
    Cmd e;
    e = ExpC();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////BiggishExp
  final public Cmd ExpA() throws ParseException {
    Cmd e;
    e = ExpB();
              {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpA


/*
  ExpB's can have commas at the top level: a,b := c,d.
  No later exps can.  
  Later exps can, however, be arguments to functions, which ExpB's cannot be.
*/
  final public Cmd ExpB() throws ParseException {
    Cmd e, f, g, timeout=null, tokens=null;
    List<AssignTarget> lhs = null;
    List<Cmd>  rhs = null;
    Id id;
    List<Cmd> actuals = null;
    Token end;
    Token[] ender = null;
    e = ExpC();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
    case EQUALS:
    case PLUSAB:
    case CONSAB:
    case MINUSAB:
    case TIMESAB:
    case FDIVAB:
    case SEND:
    case ASYNCCALL:
    case GETS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
      case GETS:
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          f = ExpC();
                          if (lhs==null) lhs=list(assignTarget(e),assignTarget(f));
    else lhs.add(assignTarget(f));
        }
        jj_consume_token(GETS);
     if (lhs == null) lhs = list(assignTarget(e));
        g = ExpC();
                rhs = list(g);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          g = ExpC();
                          rhs.add(g);
        }
     e = new Assign(e.start, last(rhs).end, lhs, rhs);
        break;
      case EQUALS:
        jj_consume_token(EQUALS);
        f = ExpC();
     {if (true) return new Bind(e.start, f.end, pattern(e), f);}
        break;
      case CONSAB:
        jj_consume_token(CONSAB);
        f = ExpC();
     e = new OpABExp(e.start, f.end, assignTarget(e), OpAB.CONSAB, f);
        break;
      case PLUSAB:
        jj_consume_token(PLUSAB);
        f = ExpC();
     e = new OpABExp(e.start, f.end, assignTarget(e), OpAB.PLUSAB, f);
        break;
      case MINUSAB:
        jj_consume_token(MINUSAB);
        f = ExpC();
     e = new OpABExp(e.start, f.end, assignTarget(e), OpAB.MINUSAB, f);
        break;
      case TIMESAB:
        jj_consume_token(TIMESAB);
        f = ExpC();
     e = new OpABExp(e.start, f.end, assignTarget(e), OpAB.TIMESAB, f);
        break;
      case FDIVAB:
        jj_consume_token(FDIVAB);
        f = ExpC();
     e = new OpABExp(e.start, f.end, assignTarget(e), OpAB.FDIVAB, f);
        break;
      case ASYNCCALL:
        jj_consume_token(ASYNCCALL);
        id = Id();
       ender = new Token[1];
        jj_consume_token(LPAREN);
        actuals = ActualsPlusRparen(ender);
       end = ender[0];
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SECURITY:
          jj_consume_token(SECURITY);
          tokens = ExpC();
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
       e = new AsyncStmt(e.start, end, e, id, actuals, tokens, DistDesugarer.asyncCall(e.start, e.end, e, id, actuals, tokens));
        break;
      case SEND:
        jj_consume_token(SEND);
        f = ExpC();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SECURITY:
          jj_consume_token(SECURITY);
          tokens = ExpC();
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
     e = new Send(e.start, f.end, e, f, tokens);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpB
  final public Cmd ExpC() throws ParseException {
    Cmd e, f, g;
    Token start;
    FunBody funbody = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case ELLIPSIS:
    case PLUS:
    case LPAREN:
    case LBRACKET:
    case LBRACE:
    case MINUS:
    case LRECBRACE:
    case DOLLARLPAREN:
    case PROBE:
    case WILD:
    case METHODLY1:
    case TABLE:
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
    case VALOF:
    case OBJECT:
    case THIS:
    case SPAWN:
    case IT:
    case NOT:
    case SUPER:
    case MAP:
    case ORD:
    case NULL:
    case TRUE:
    case FALSE:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      e = ExpD();
   {if (true) return e;}
      break;
    case FN:
      start = jj_consume_token(FN);
      funbody = FnBody("fn", null);
   {if (true) return new AnonFun(start, funbody.end, funbody, funbody.isMarkedPure());}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpC
  final public Cmd ExpD() throws ParseException {
    Cmd e,f,g, timeout=null, timcmd = null, tokens = null;
    Token end;
    Id id;
    List<Cmd> actuals;
    Token[] ender;
    e = ExpF();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYNCCALL:
    case IF:
    case UNLESS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        jj_consume_token(IF);
        f = ExpF();
        jj_consume_token(ELSE);
        g = ExpD();
      e = new If(e.start, g.end, f, e, g, false, true);
        break;
      case UNLESS:
        jj_consume_token(UNLESS);
        f = ExpF();
        jj_consume_token(ELSE);
        g = ExpD();
      e = new If(e.start, g.end, f, e, g, true, true);
        break;
      case SYNCCALL:
        jj_consume_token(SYNCCALL);
        id = Id();
        jj_consume_token(LPAREN);
         ender = new Token[1];
        actuals = ActualsPlusRparen(ender);
         end = ender[0];
        if (jj_2_10(4)) {
          jj_consume_token(SECURITY);
          tokens = CompactExp();
        } else {
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMEOUT:
          jj_consume_token(TIMEOUT);
          jj_consume_token(LPAREN);
          timeout = BiggishExp();
          jj_consume_token(RPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
          case ELLIPSIS:
          case PLUS:
          case LPAREN:
          case LBRACKET:
          case LBRACE:
          case MINUS:
          case LRECBRACE:
          case DOLLARLPAREN:
          case PROBE:
          case WILD:
          case METHODLY1:
          case TABLE:
          case QUERYSWISS:
          case FIRST:
          case QUERYAFTER:
          case QUERYLIST:
          case COUNT:
          case EVERY:
          case SOME:
          case QUERYSORT:
          case QUERYTABLE:
          case QUERYGROUP:
          case VALOF:
          case OBJECT:
          case THIS:
          case SPAWN:
          case IT:
          case NOT:
          case SUPER:
          case MAP:
          case ORD:
          case NULL:
          case TRUE:
          case FALSE:
          case HEXINT:
          case OCTINT:
          case BININT:
          case ID1:
          case ID2:
          case INT:
          case FLOAT:
          case STRING2:
          case STRING1:
          case STRING4:
          case STRING3:
            timcmd = ExpOrBlock();
            break;
          default:
            jj_la1[28] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
       e = new SyncStmt(e.start, end, e, id, actuals, timeout, timcmd, tokens,
         DistDesugarer.syncCall(e.start, end, e, id, actuals, timeout, timcmd, tokens)
         );
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpD
  final public Cmd ExpF() throws ParseException {
    Cmd e;
    e = ExpM();
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpF
  final public Cmd ExpM() throws ParseException {
    Cmd e,f;
    List<Cmd> L = null;
    // ExpM is currently CompactExp.  
      // If anything gets into the hierarchy before ExpM, revise CompactExp accordingly.
      e = ExpP();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case OR:
    case ONEOF:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        f = ExpP();
                         L = list(e,f);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            ;
            break;
          default:
            jj_la1[32] = jj_gen;
            break label_7;
          }
          jj_consume_token(AND);
          f = ExpP();
                          L.add(f);
        }
        e = new OpExp(e.start, f.end, Op.AND, L);
        break;
      case OR:
        jj_consume_token(OR);
        f = ExpP();
                        L = list(e,f);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OR:
            ;
            break;
          default:
            jj_la1[33] = jj_gen;
            break label_8;
          }
          jj_consume_token(OR);
          f = ExpP();
                         L.add(f);
        }
        e = new OpExp(e.start, f.end, Op.OR, L);
        break;
      case ONEOF:
        jj_consume_token(ONEOF);
        f = ExpP();
                           L = list(e,f);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ONEOF:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_9;
          }
          jj_consume_token(ONEOF);
          f = ExpP();
                            L.add(f);
        }
        e = new OpExp(e.start, f.end, Op.ONEOF, L);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpM
  final public Cmd ExpP() throws ParseException {
  Cmd e,f;
  Op op;
  List<Cmd> conses = null;
    e = ExpQ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
    case TILDE:
    case CONS:
    case ADDTO:
    case DELFROM:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
        f = ExpQ();
       e = new MatchExp(e.start, f.end, (e), pattern(f));
        break;
      case CONS:
        jj_consume_token(CONS);
        f = ExpQ();
        conses = list(e,f);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CONS:
            ;
            break;
          default:
            jj_la1[37] = jj_gen;
            break label_10;
          }
          jj_consume_token(CONS);
          f = ExpQ();
         conses.add(f);
        }
     e = rassoc(Op.CONS, conses);
        break;
      case AT:
      case ADDTO:
      case DELFROM:
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AT:
            jj_consume_token(AT);
              op = Op.APPEND;
            break;
          case ADDTO:
            jj_consume_token(ADDTO);
                 op = Op.ADDTO;
            break;
          case DELFROM:
            jj_consume_token(DELFROM);
                   op = Op.DELFROM;
            break;
          default:
            jj_la1[38] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          f = ExpQ();
        e = new OpExp(e.start, f.end, op, list(e,f));
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AT:
          case ADDTO:
          case DELFROM:
            ;
            break;
          default:
            jj_la1[39] = jj_gen;
            break label_11;
          }
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpP
  final public Cmd ExpQ() throws ParseException {
    Cmd e;
    Cmd f = null;
    Token comp=null;
    ComparisonBit cb = null;
    List<ComparisonBit> rest = null;
    e = ExpR();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQEQ:
      case TYPE:
      case IN:
      case LT:
      case LE:
      case NE:
      case GT:
      case GE:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LE:
        comp = jj_consume_token(LE);
        break;
      case LT:
        comp = jj_consume_token(LT);
        break;
      case GT:
        comp = jj_consume_token(GT);
        break;
      case GE:
        comp = jj_consume_token(GE);
        break;
      case EQEQ:
        comp = jj_consume_token(EQEQ);
        break;
      case NE:
        comp = jj_consume_token(NE);
        break;
      case IN:
        comp = jj_consume_token(IN);
        break;
      case TYPE:
        comp = jj_consume_token(TYPE);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      f = ExpR();
       cb = new ComparisonBit(comp, f.end, ComparisonOp.of(comp.image), f);
       if (rest == null) rest = list(cb); else rest.add(cb);
    }
     if (rest != null) e = new Comparison(e.start, f.end, e, rest);
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpQ
  final public Cmd ExpR() throws ParseException {
    Cmd e;
    e = ExpS();
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpR
  final public Cmd ExpS() throws ParseException {
    Cmd e, f;
    Token op;
    e = ExpT();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOTDOT:
    case DOTDOTLT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOTDOT:
        jj_consume_token(DOTDOT);
        f = ExpT();
                         e = new OpExp(e.start, f.end, Op.DOTDOT, list(e,f));
        break;
      case DOTDOTLT:
        jj_consume_token(DOTDOTLT);
        f = ExpT();
                           e = new OpExp(e.start, f.end, Op.DOTDOTLT, list(e,f));
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpS
  final public Cmd ExpT() throws ParseException {
    Cmd e,f;
    e = ExpU();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        f = ExpU();
                       e = new OpExp(e.start, f.end, Op.PLUS, list(e,f));
        break;
      case MINUS:
        jj_consume_token(MINUS);
        f = ExpU();
                        e = new OpExp(e.start, f.end, Op.MINUS, list(e,f));
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpT
  final public Cmd ExpU() throws ParseException {
    Cmd e,f,g;
    Token op;
    e = ExpV();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_14;
      }
      jj_consume_token(STAR);
      f = ExpV();
                       e = new OpExp(e.start, f.end, Op.TIMES, list(e,f));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLASH:
    case METHODLY2:
    case IDIV:
    case MOD:
    case 168:
    case 170:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
        jj_consume_token(SLASH);
        f = ExpV();
                          e = new OpExp(e.start, f.end, Op.FDIV, list(e,f));
        break;
      case IDIV:
        jj_consume_token(IDIV);
        f = ExpV();
                         e = new OpExp(e.start, f.end, Op.IDIV, list(e,f));
        break;
      case MOD:
        jj_consume_token(MOD);
        f = ExpV();
                         e = new OpExp(e.start, f.end, Op.MOD, list(e,f));
        break;
      case METHODLY2:
        op = jj_consume_token(METHODLY2);
        f = ExpV();
       e = new MethodCall(e.start, f.end, e, tok2id(op), list(f));
        break;
      case 168:
        op = jj_consume_token(168);
        f = ExpV();
        jj_consume_token(169);
        g = ExpV();
         e = new MethodCall(e.start, g.end, e,new Id(op, "<@@>"), list(f,g));
        break;
      case 170:
        op = jj_consume_token(170);
        f = ExpV();
        jj_consume_token(171);
        g = ExpV();
         e = new MethodCall(e.start, g.end, e,new Id(op, "[@@]"), list(f,g));
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpT
  final public Cmd ExpV() throws ParseException {
    Cmd e;
    QualName qn;
    e = ExpY();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID1:
      case ID2:
        qn = QualName(1);
        break;
      case TABLE:
      case PURE:
      case ORD:
      case FN:
        qn = TypeNameAsQualName();
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     e = new TypedExp(e.start, qn.end, e, qn);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpV
  final public Cmd ExpY() throws ParseException {
     Cmd e;
     Token start, end;
     Op op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case NOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        start = jj_consume_token(NOT);
                    op = Op.NOT;
        break;
      case MINUS:
        start = jj_consume_token(MINUS);
                      op = Op.NEG;
        break;
      case PLUS:
        start = jj_consume_token(PLUS);
                     op = Op.POS;
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e = ExpY();
     {if (true) return new OpExp(start, e.end, op, list(e));}
      break;
    case DOT:
    case ELLIPSIS:
    case LPAREN:
    case LBRACKET:
    case LBRACE:
    case LRECBRACE:
    case DOLLARLPAREN:
    case PROBE:
    case WILD:
    case METHODLY1:
    case TABLE:
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
    case VALOF:
    case OBJECT:
    case THIS:
    case SPAWN:
    case IT:
    case SUPER:
    case MAP:
    case ORD:
    case NULL:
    case TRUE:
    case FALSE:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      e = ExpZ();
     {if (true) return e;}
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpY
  final public Cmd ExpZ() throws ParseException {
     Cmd e;
     PostExp post;
     List<PostExp> posts = null;
    e = ExpZ1();
    label_15:
    while (true) {
      if (jj_2_11(5)) {
        ;
      } else {
        break label_15;
      }
      post = PostExp();
     if (posts == null) posts = list(post); else posts.add(post);
    }
   {if (true) return PostfixesToExp.convert(e, posts, 0);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpZ
  final public PostExp PostExp() throws ParseException {
    Token start, end;
    Id id;
    Op op;
    List<Cmd> actuals;
    RecordCtor rc;
    Token[] ender = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      start = jj_consume_token(DOT);
      id = Id();
    {if (true) return new PostExpDotId(start, id.end, id);}
      break;
    case LPAREN:
      start = jj_consume_token(LPAREN);
    ender = new Token[1];
      actuals = ActualsPlusRparen(ender);
    end = ender[0];
     {if (true) return new PostExpArgs(start, end, actuals);}
      break;
    case LBRACKET:
      start = jj_consume_token(LBRACKET);
      actuals = Actuals();
      end = jj_consume_token(RBRACKET);
    {if (true) return new PostExpBracketArgs(start, end, actuals);}
      break;
    case LBRACE:
    case LRECBRACE:
      rc = RecordCtor();
    {if (true) return new PostExpRecordArgs(rc.start, rc.end, rc.fields);}
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////PostExp
  final public List<Cmd> ActualsPlusRparen(Token[] ender) throws ParseException {
    List<Cmd> actuals = Collections.EMPTY_LIST;
    Token end;
    Cmd e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case ELLIPSIS:
    case PLUS:
    case LPAREN:
    case LBRACKET:
    case LBRACE:
    case MINUS:
    case LRECBRACE:
    case DOLLARLPAREN:
    case PROBE:
    case WILD:
    case METHODLY1:
    case TABLE:
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
    case VALOF:
    case OBJECT:
    case THIS:
    case SPAWN:
    case IT:
    case NOT:
    case SUPER:
    case MAP:
    case ORD:
    case FN:
    case NULL:
    case TRUE:
    case FALSE:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      e = BiggishExp();
                      actuals = list(e);
      label_16:
      while (true) {
        if (jj_2_12(3)) {
          ;
        } else {
          break label_16;
        }
        jj_consume_token(COMMA);
        e = BiggishExp();
                        actuals.add(e);
      }
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    end = jj_consume_token(RPAREN);
   if (ender != null) ender[0] = end;
   {if (true) return actuals;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ActualsPlusRparen
  final public List<Cmd> Actuals() throws ParseException {
    Cmd e;
    List<Cmd> actuals = new ArrayList<Cmd>(0);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case ELLIPSIS:
    case PLUS:
    case LPAREN:
    case LBRACKET:
    case LBRACE:
    case MINUS:
    case LRECBRACE:
    case DOLLARLPAREN:
    case PROBE:
    case WILD:
    case METHODLY1:
    case TABLE:
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
    case VALOF:
    case OBJECT:
    case THIS:
    case SPAWN:
    case IT:
    case NOT:
    case SUPER:
    case MAP:
    case ORD:
    case FN:
    case NULL:
    case TRUE:
    case FALSE:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      e = BiggishExp();
                      actuals.add(e);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[58] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMMA);
        e = BiggishExp();
                        actuals.add(e);
      }
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
   {if (true) return actuals;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Actuals
  final public Cmd ExpZ1() throws ParseException {
  Cmd e;
  Op op;
  Token start, end;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case NULL:
    case TRUE:
    case FALSE:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
      case TRUE:
      case FALSE:
      case HEXINT:
      case OCTINT:
      case BININT:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        e = Literal();
        break;
      case THIS:
      case ID1:
      case ID2:
        e = VarExp();
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
   {if (true) return e;}
      break;
    case LPAREN:
      start = jj_consume_token(LPAREN);
      if (jj_2_13(5)) {
        e = BiggishExp();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RPAREN:
          end = jj_consume_token(RPAREN);
        {if (true) return new Parens(start, end, e);}
          break;
        case RPARENQU:
          end = jj_consume_token(RPARENQU);
        {if (true) return new EvalTestExpExp(start, end, e);}
          break;
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case QIF:
        case THROW:
        case TRY:
        case MATCH:
        case IF:
        case UNLESS:
        case RECV:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case QIF:
          case THROW:
          case TRY:
          case MATCH:
          case IF:
          case UNLESS:
          case RECV:
            e = StmtForInsideParens();
            break;
          case LBRACE:
            e = Seq();
            break;
          default:
            jj_la1[62] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          end = jj_consume_token(RPAREN);
      {if (true) return new Parens(start, end, e);}
          break;
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case LBRACKET:
      e = ListCtor();
                  {if (true) return e;}
      break;
    case LBRACE:
    case LRECBRACE:
      e = RecordCtor();
                    {if (true) return e;}
      break;
    case SUPER:
      e = SuperCall();
                   {if (true) return e;}
      break;
    case OBJECT:
      e = AnonObj();
                 {if (true) return e;}
      break;
    case VALOF:
      e = Valof();
               {if (true) return e;}
      break;
    case TABLE:
      e = Table();
               {if (true) return e;}
      break;
    case ORD:
      e = Ord();
             {if (true) return e;}
      break;
    case IT:
      e = ItExp();
               {if (true) return e;}
      break;
    case WILD:
      e = WildcardExp();
                     {if (true) return e;}
      break;
    case DOLLARLPAREN:
      e = InterpolationExp();
                         {if (true) return e;}
      break;
    case PROBE:
      e = Probe();
              {if (true) return e;}
      break;
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
      e = Query();
              {if (true) return e;}
      break;
    case MAP:
      e = MapCtor();
                {if (true) return e;}
      break;
    case METHODLY1:
      e = Methodly1();
                  {if (true) return e;}
      break;
    case SPAWN:
      e = Spawn();
                {if (true) return e;}
      break;
    case DOT:
      e = DotMethodCallExp();
                          {if (true) return e;}
      break;
    case ELLIPSIS:
      start = jj_consume_token(ELLIPSIS);
      e = ExpZ1();
                                   {if (true) return new ListForGroup(start, e.end, e);}
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////ExpZ


////////////////////////////////////////////////////////////////
// Exp bits 
////////////////////////////////////////////////////////////////
  final public MethodCall Methodly1() throws ParseException {
    Token start;
    Cmd exp;
    start = jj_consume_token(METHODLY1);
    exp = ExpZ1();
   {if (true) return new MethodCall(start, exp.end, exp, tok2id(start), Collections.EMPTY_LIST);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Methodly1
  final public FunBody FnBody(String keyword, String name) throws ParseException {
    MonoBody mb;
    List<MonoBody> mbs=null;
    boolean purity;
    mb = MonoBody(keyword, name);
                                mbs = list(mb); purity = mb.isMarkedPure();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BAR:
        ;
        break;
      default:
        jj_la1[65] = jj_gen;
        break label_18;
      }
      jj_consume_token(BAR);
      mb = MonoBody(keyword, name);
                                        mbs.add(mb); purity |= mb.isMarkedPure();
    }
   {if (true) return new FunBody(mbs.get(0).start, last(mbs).end, mbs, purity);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////FnBody
  final public MonoBody MonoBody(String s1, String s2) throws ParseException {
    Formals formals = null;
    Token a = null;
    Token start = null;
    boolean pure = false;
    Cmd e;
    if (jj_2_14(5)) {
      formals = Formals();
    } else {
      ;
    }
    pure = Purity();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      a = jj_consume_token(EQUALS);
     if (formals == null) {formals = new Formals(start, start, new ArrayList<Pat>(0)); start=a;}
     else {start = formals.start;}
      if (jj_2_15(5)) {
        e = CompactExp();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          e = Seq();
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case LBRACE:
      e = SeqOf2(s1, s2);
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return new MonoBody(start, e.end, null, formals, null, null, false, 0, e, false, pure);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////MonoBody
  final public Cmd Literal() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING1:
      t = jj_consume_token(STRING1);
                 {if (true) return QuoteStyle.Q1.engulf(t);}
      break;
    case STRING2:
      t = jj_consume_token(STRING2);
                 {if (true) return QuoteStyle.Q2.engulf(t);}
      break;
    case STRING3:
      t = jj_consume_token(STRING3);
                 {if (true) return QuoteStyle.QQQ1.engulf(t);}
      break;
    case STRING4:
      t = jj_consume_token(STRING4);
                 {if (true) return QuoteStyle.QQQ2.engulf(t);}
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
   {if (true) return new Literal(t,t,Double.parseDouble(t.image));}
      break;
    case INT:
      t = jj_consume_token(INT);
   {if (true) return new Literal(t,t,Long.parseLong(t.image));}
      break;
    case HEXINT:
      t = jj_consume_token(HEXINT);
   {if (true) return new Literal(t,t,Long.parseLong(
     t.image.substring(2), 16));}
      break;
    case OCTINT:
      t = jj_consume_token(OCTINT);
   {if (true) return new Literal(t,t,Long.parseLong(
     t.image.substring(2), 8));}
      break;
    case BININT:
      t = jj_consume_token(BININT);
   {if (true) return new Literal(t,t,Long.parseLong(
     t.image.substring(2), 2));}
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
              {if (true) return new Literal(t,t,true);}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
               {if (true) return new Literal(t,t,false);}
      break;
    case NULL:
      t = jj_consume_token(NULL);
              {if (true) return new Literal(t, t, null);}
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //Literal
  final public Cmd VarExp() throws ParseException {
    Id id;
    Token hwn;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID1:
    case ID2:
      id = Id();
   {if (true) return new VarExp(id.start, id.end, id);}
      break;
    case THIS:
      hwn = jj_consume_token(THIS);
   {if (true) return new This(hwn, hwn);}
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////VarExp
  final public Probe Probe() throws ParseException {
    Id id = null;
    Cmd exp;
    Token count = null;
    int icount = -1;
    List<Cmd> cmds = null;
    Token start, end;
    start = jj_consume_token(PROBE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID1:
    case ID2:
      id = Id();
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
   cmds = Collections.EMPTY_LIST;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case ELLIPSIS:
    case PLUS:
    case LPAREN:
    case LBRACKET:
    case LBRACE:
    case MINUS:
    case LRECBRACE:
    case DOLLARLPAREN:
    case PROBE:
    case WILD:
    case METHODLY1:
    case TABLE:
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
    case VALOF:
    case OBJECT:
    case THIS:
    case SPAWN:
    case IT:
    case NOT:
    case SUPER:
    case MAP:
    case ORD:
    case NULL:
    case TRUE:
    case FALSE:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      exp = CompactExp();
                        cmds = list(exp);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[71] = jj_gen;
          break label_19;
        }
        jj_consume_token(COMMA);
        exp = CompactExp();
                                  cmds.add(exp);
      }
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    end = jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROBECOUNT:
      jj_consume_token(PROBECOUNT);
      icount = 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        count = jj_consume_token(INT);
                      icount = Integer.parseInt(count.image);
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    fisher.test.Prober prober =
       id == null ? fisher.test.Prober.NULL : fisher.test.Prober.of(id.str());
    Probe p = new Probe(start, end, id, cmds, icount);
    p.prober = prober;
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Probe
  final public RecordCtor RecordCtor() throws ParseException {
    Token start, end;
    RecordField rf;
    List<RecordField> fields = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      start = jj_consume_token(LBRACE);
      if (jj_2_16(5)) {
        rf = RecordField();
                        fields = list(rf);
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[75] = jj_gen;
            break label_20;
          }
          jj_consume_token(COMMA);
          rf = RecordField();
                                  fields.add(rf);
        }
      } else {
        ;
      }
   if (fields == null) fields = list();
      end = jj_consume_token(RBRACE);
      break;
    case LRECBRACE:
      start = jj_consume_token(LRECBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID1:
      case ID2:
        rf = RecordField();
                        fields = list(rf);
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[76] = jj_gen;
            break label_21;
          }
          jj_consume_token(COMMA);
          rf = RecordField();
                                  fields.add(rf);
        }
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
   if (fields == null) fields = list();
      end = jj_consume_token(RRECBRACE);
      break;
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return new RecordCtor(start, end, fields);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////RecordCtor
  final public RecordField RecordField() throws ParseException {
    Id id;
    Cmd exp=null;
    id = Id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      exp = BiggishExp();
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    if (exp == null) {
       {if (true) return new RecordField(id.start, id.end, id,
          new VarExp(id.start, id.end, (Id) id.ingestedDeepCopy(id.start, id.end)));}
       }
    else
       {if (true) return new RecordField(id.start, exp.end, id, exp);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////RecordField
  final public ListCtor ListCtor() throws ParseException {
    Token start, end;
    ListBit lb;
    List<ListBit> bits = null;
    start = jj_consume_token(LBRACKET);
   bits = new ArrayList<ListBit>(0);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case ELLIPSIS:
    case PLUS:
    case LPAREN:
    case LBRACKET:
    case LBRACE:
    case MINUS:
    case LRECBRACE:
    case DOLLARLPAREN:
    case PROBE:
    case WILD:
    case METHODLY1:
    case TABLE:
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
    case VALOF:
    case OBJECT:
    case THIS:
    case SPAWN:
    case IT:
    case NOT:
    case SUPER:
    case MAP:
    case ORD:
    case NULL:
    case TRUE:
    case FALSE:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      lb = ListBit();
                    bits.add(lb);
      label_22:
      while (true) {
        if (jj_2_17(3)) {
          ;
        } else {
          break label_22;
        }
        jj_consume_token(COMMA);
        lb = ListBit();
                      bits.add(lb);
      }
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    end = jj_consume_token(RBRACKET);
   {if (true) return new ListCtor(start, end, bits);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ListCtor
  final public ListBit ListBit() throws ParseException {
    Cmd c;
    Token ellip = null;
    c = CompactExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELLIPSIS:
      ellip = jj_consume_token(ELLIPSIS);
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
    if (ellip == null)
       {if (true) return new ListBitExp(c.start, c.end, c);}
    else
       {if (true) return new ListBitEllip(c.start, ellip, c);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ListBit
  final public Cmd SuperCall() throws ParseException {
    Token supes, last;
    QualName qn = null;
    Id id = null;
    List<Cmd> actuals;
    Token[] ender;
    supes = jj_consume_token(SUPER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case AT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        jj_consume_token(AT);
        qn = QualName(2);
                            id = qn.last(); qn = qn.butlast();
        break;
      case DOT:
        jj_consume_token(DOT);
        id = Id();
                      qn = null;
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
    jj_consume_token(LPAREN);
   ender = new Token[1];
    actuals = ActualsPlusRparen(ender);
   last = ender[0];
    {if (true) return new SuperCall(supes, last, qn, actuals,id);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////SuperCall
  final public SuperCtorCall SuperCtorCall() throws ParseException {
    Token start, end;
    QualName qn = null;
    List<Cmd> actuals;
    start = jj_consume_token(NEW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      jj_consume_token(AT);
      qn = QualName(1);
      break;
    default:
      jj_la1[85] = jj_gen;
      ;
    }
    jj_consume_token(LPAREN);
    actuals = ActualsPlusRparen(null);
    end = jj_consume_token(SEMI);
    {if (true) return new SuperCtorCall(start, end, qn, actuals);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////SuperCtorCall

////////////////////////////////////////////////////////////////
// Query
////////////////////////////////////////////////////////////////
  final public QueryAbstract Query() throws ParseException {
    QueryAbstract a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COUNT:
    case EVERY:
    case SOME:
      a = QueryQuantifier();
      break;
    case QUERYSWISS:
      a = QuerySwiss();
      break;
    case FIRST:
      a = QueryFirstlike();
      break;
    case QUERYAFTER:
      a = QueryAfter();
      break;
    case QUERYLIST:
      a = QueryListComprehension();
      break;
    case QUERYTABLE:
      a = QueryTable();
      break;
    case QUERYGROUP:
      a = QueryGroup();
      break;
    case QUERYSORT:
      a = QuerySort();
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Query
  final public List<QueryControl> QueryControls() throws ParseException {
    QueryControl c;
    List<QueryControl> controls = new ArrayList<QueryControl>(1);
    c = QueryControl();
                     controls = list(c);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      c = QueryControl();
                               controls.add(c);
    }
  {if (true) return controls;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QueryControls
  final public QueryControl QueryControl() throws ParseException {
    QueryControl qc;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      qc = QueryControlFor();
      break;
    case WHILE:
    case UNTIL:
      qc = QueryControlWhile();
      break;
    case IF:
      qc = QueryControlIf();
      break;
    case DOT:
    case ELLIPSIS:
    case PLUS:
    case LPAREN:
    case LBRACKET:
    case LBRACE:
    case MINUS:
    case LRECBRACE:
    case DOLLARLPAREN:
    case PROBE:
    case WILD:
    case METHODLY1:
    case TABLE:
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
    case VALOF:
    case OBJECT:
    case THIS:
    case SPAWN:
    case IT:
    case NOT:
    case SUPER:
    case MAP:
    case ORD:
    case NULL:
    case TRUE:
    case FALSE:
    case VAL:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      qc = QueryControlVal();
      break;
    case VAR:
      qc = QueryControlVar();
      break;
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return qc;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QueryControl
  final public QueryControlFor QueryControlFor() throws ParseException {
    Token start, end;
    Pat pat;
    Cmd list;
    boolean inquisitive;
    start = jj_consume_token(FOR);
    pat = Pat();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ITER_DEM:
      jj_consume_token(ITER_DEM);
               inquisitive = false;
      break;
    case ITER_INQ:
      jj_consume_token(ITER_INQ);
               inquisitive = true;
      break;
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    list = CompactExp();
   {if (true) return new QueryControlFor(start, list.end, pat, list, inquisitive);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QueryControlFor
  final public QueryControlIf QueryControlIf() throws ParseException {
    Token start;
    Cmd pred;
    start = jj_consume_token(IF);
    pred = CompactExp();
   {if (true) return new QueryControlIf(start, pred.end, pred);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QueryControlIf
  final public QueryControlVal QueryControlVal() throws ParseException {
    Token start = null;
    Cmd patc, exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAL:
      start = jj_consume_token(VAL);
      break;
    default:
      jj_la1[90] = jj_gen;
      ;
    }
    patc = CompactExp();
    jj_consume_token(EQUALS);
    exp = CompactExp();
   {if (true) return new QueryControlVal(
     start == null ? patc.start : start,
     exp.end, pattern(patc), exp);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QueryControlVal
  final public QueryControlVar QueryControlVar() throws ParseException {
    Token start;
    Id var;
    Cmd init, next;
    boolean doBeforeFirst;
    start = jj_consume_token(VAR);
    var = Id();
    jj_consume_token(GETS);
    init = CompactExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOREL:
      jj_consume_token(MOREL);
            doBeforeFirst = false;
      break;
    case NONE:
      jj_consume_token(NONE);
                                              doBeforeFirst = true;
      break;
    default:
      jj_la1[91] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    next = CompactExp();
   {if (true) return new QueryControlVar(start, next.end, var, init, next, doBeforeFirst);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QueryControlVar
  final public QueryControlWhile QueryControlWhile() throws ParseException {
     Token start;
     boolean isUntil;
     Cmd test;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      start = jj_consume_token(WHILE);
                     isUntil = false;
      break;
    case UNTIL:
      start = jj_consume_token(UNTIL);
                     isUntil = true;
      break;
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    test = CompactExp();
   {if (true) return new QueryControlWhile(start, test.end, test, isUntil);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QueryControlWhile
  final public QuerySwiss QuerySwiss() throws ParseException {
    Token start, end, mid;
    Cmd one, many = null, none=null;
    List<QueryControl> controls;
    start = jj_consume_token(QUERYSWISS);
    one = CompactExp();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOREL:
      case NONE:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_24;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOREL:
        mid = jj_consume_token(MOREL);
       if (many != null) {if (true) throw error(start, mid, "Too many %> clauses");}
        many = CompactExp();
        break;
      case NONE:
        mid = jj_consume_token(NONE);
       if (none != null) {if (true) throw error(start, mid, "Too many %< clauses");}
        none = CompactExp();
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(BAR);
    controls = QueryControls();
    end = jj_consume_token(RPAREN);
   {if (true) return QueryDesugarer.swiss(start, end, controls, one, many, none);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QuerySwiss
  final public QueryAfter QueryAfter() throws ParseException {
    Token start, end;
    Cmd exp;
    List<QueryControl> controls;
    start = jj_consume_token(QUERYAFTER);
    jj_consume_token(LPAREN);
    exp = CompactExp();
    jj_consume_token(BAR);
    controls = QueryControls();
    end = jj_consume_token(RPAREN);
   {if (true) return QueryDesugarer.after(start, end, controls, exp);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QueryAfter
  final public QueryFirstlike QueryFirstlike() throws ParseException {
    Token start, end;
    char kind;
    Cmd exp;
    Cmd none = null;
    List<QueryControl> controls;
    start = jj_consume_token(FIRST);
                     kind = '1';
    jj_consume_token(LPAREN);
    exp = CompactExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NONE:
      jj_consume_token(NONE);
      none = CompactExp();
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    jj_consume_token(BAR);
    controls = QueryControls();
    end = jj_consume_token(RPAREN);
    switch(kind) {
      default: {if (true) throw new RuntimeException("Internal error - QueryFirstlike borken!");}
      case '1': {if (true) return QueryDesugarer.first(start, end, controls, exp, none, true);}
//      case '-': return QueryDesugarer.last(start, end, controls, exp, none);
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////QueryFirstlike
  final public QueryFirst QueryIf() throws ParseException {
    Token start, end;
    List<QueryControl> controls;
    Cmd thenClause;
    Cmd elseClause = null;
    start = jj_consume_token(QIF);
    jj_consume_token(LPAREN);
    controls = QueryControls();
    jj_consume_token(RPAREN);
    thenClause = Stmt("%if", null);
                                  end = thenClause.end;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elseClause = Stmt("%if", "else");
                                      end = elseClause.end;
      break;
    default:
      jj_la1[96] = jj_gen;
      ;
    }
   {if (true) return QueryDesugarer.first(start, end, controls, thenClause, elseClause, false);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QueryIf
  final public QueryQuantifier QueryQuantifier() throws ParseException {
    Token start, end;
    char kind;
    Cmd pred;
    List<QueryControl> controls;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COUNT:
      start = jj_consume_token(COUNT);
                     kind='#';
      break;
    case EVERY:
      start = jj_consume_token(EVERY);
                     kind='*';
      break;
    case SOME:
      start = jj_consume_token(SOME);
                     kind='1';
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    pred = CompactExp();
    jj_consume_token(BAR);
    controls = QueryControls();
    end = jj_consume_token(RPAREN);
   switch(kind) {
     default: {if (true) throw new RuntimeException("Internal doom in QueryQuantifier");}
     case '#': {if (true) return QueryDesugarer.count(start, end, controls, pred);}
     case '*': {if (true) return QueryDesugarer.every(start, end, controls, pred);}
     case '1': {if (true) return QueryDesugarer.some(start, end, controls, pred);}
   }//select

    throw new Error("Missing return statement in function");
  }

 //////////////////////QueryQuantifier
  final public QueryListComprehension QueryListComprehension() throws ParseException {
    Token start, end;
    boolean isAppended = false;
    Cmd exp;
    List<QueryControl> controls;
    start = jj_consume_token(QUERYLIST);
    exp = CompactExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELLIPSIS:
      jj_consume_token(ELLIPSIS);
                isAppended = true;
      break;
    default:
      jj_la1[98] = jj_gen;
      ;
    }
    jj_consume_token(BAR);
    controls = QueryControls();
    end = jj_consume_token(RBRACKET);
   {if (true) return QueryDesugarer.listComprehension(start, end, controls, exp, isAppended);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QueryListComprehension
  final public QueryTable QueryTable() throws ParseException {
    Token start, end;
    Token left;
    IdWithOptInit key;
    List<IdWithOptInit> keys = null;
    boolean lparen, rparen;
    TableFields item;
    List<TableFields> items = Collections.EMPTY_LIST;
    List<QueryControl> controls;
    start = jj_consume_token(QUERYTABLE);
    jj_consume_token(LPAREN);
    key = IdWithOptInit(ColAccess.KEY);
                                            keys = list(key);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_25;
      }
      jj_consume_token(COMMA);
      key = IdWithOptInit(ColAccess.KEY);
                                              keys.add(key);
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAP:
    case VAR:
    case VAL:
    case ID1:
    case ID2:
      item = TableFields();
                                items = list(item);
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAP:
        case VAR:
        case VAL:
        case ID1:
        case ID2:
          ;
          break;
        default:
          jj_la1[100] = jj_gen;
          break label_26;
        }
        item = TableFields();
                                 items.add(item);
      }
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
    jj_consume_token(BAR);
    controls = QueryControls();
    end = RbraceOf("table");
   {if (true) return QueryDesugarer.table(start, end, controls, keys, items);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QueryTable
  final public QueryGroup QueryGroup() throws ParseException {
    Token start, end;
    QGKey key;
    List<QGKey> keys = null;
    QGAccum accum;
    List<QGAccum> accums = null;
    List<QueryControl> controls;
    start = jj_consume_token(QUERYGROUP);
    jj_consume_token(LPAREN);
    key = QGKey();
                    keys = list(key);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[102] = jj_gen;
        break label_27;
      }
      jj_consume_token(COMMA);
      key = QGKey();
                      keys.add(key);
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    accum = QGAccum();
                        accums = list(accum);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAP:
      case VAR:
      case VAL:
      case ID1:
      case ID2:
        ;
        break;
      default:
        jj_la1[103] = jj_gen;
        break label_28;
      }
      accum = QGAccum();
                          accums.add(accum);
    }
    jj_consume_token(BAR);
    controls = QueryControls();
    end = RbraceOf("group");
    {if (true) return QueryDesugarer.group(start,end,controls, keys, accums);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QueryGroup
  final public QGKey QGKey() throws ParseException {
    Id id;
    Cmd init;
    id = Id();
    jj_consume_token(EQUALS);
    init = BiggishExp();
   {if (true) return new QGKey(id.start, init.end, id, init);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QGKey
  final public QGAccum QGAccum() throws ParseException {
    Token start0=null, start1=null, start=null, end;
    ColAccess ack = ColAccess.VAL;
    ColSpecial spe = ColSpecial.NORMAL;
    Id id;
    QGAccum accum;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAP:
      start0 = jj_consume_token(MAP);
                   spe = ColSpecial.MAP;
      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAL:
    case ID1:
    case ID2:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAL:
        start1 = jj_consume_token(VAL);
        break;
      default:
        jj_la1[105] = jj_gen;
        ;
      }
      id = Id();
      jj_consume_token(EQUALS);
      accum = QGAccumAfter(firstNonNull(start0, start1, id.start),
             ColAccess.VAL,
             spe, id);
      {if (true) return accum;}
      break;
    case VAR:
      start = jj_consume_token(VAR);
      id = Id();
      jj_consume_token(GETS);
      accum = QGAccumAfter(firstNonNull(start0, start1, id.start),
             ColAccess.VAR,
             spe, id);
      {if (true) return accum;}
      break;
    default:
      jj_la1[106] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////QGAccum
  final public QGAccum QGAccumAfter(Token start, ColAccess ack, ColSpecial spe, Id id) throws ParseException {
    Token end;
    Cmd first, then, after = null;
    Cmd exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FIRST:
      jj_consume_token(FIRST);
      first = BiggishExp();
      jj_consume_token(NONE);
      then = CompactExp();
     end = then.end;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUERYAFTER:
        jj_consume_token(QUERYAFTER);
        after = CompactExp();
       end = after.end;
        break;
      default:
        jj_la1[107] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        end = jj_consume_token(SEMI);
        break;
      default:
        jj_la1[108] = jj_gen;
        ;
      }
     {if (true) return new QGAccum(start, end, ack, spe, id, first, then, after);}
      break;
    case QUERYLISTWORD:
      jj_consume_token(QUERYLISTWORD);
      exp = CompactExp();
     end = exp.end;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        end = jj_consume_token(SEMI);
        break;
      default:
        jj_la1[109] = jj_gen;
        ;
      }
     {if (true) return QueryDesugarer.qgaccumList(start, end, ack, spe, id, exp, 1);}
      break;
    case QUERYREV:
      jj_consume_token(QUERYREV);
      exp = CompactExp();
     end = exp.end;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        end = jj_consume_token(SEMI);
        break;
      default:
        jj_la1[110] = jj_gen;
        ;
      }
     {if (true) return QueryDesugarer.qgaccumList(start, end, ack, spe, id, exp, -1);}
      break;
    case COUNT:
      end = jj_consume_token(COUNT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        end = jj_consume_token(SEMI);
        break;
      default:
        jj_la1[111] = jj_gen;
        ;
      }
     {if (true) return QueryDesugarer.qgaccumList(start, end, ack, spe, id, null, 0);}
      break;
    default:
      jj_la1[112] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////QGAccumAFter
  final public QuerySort QuerySort() throws ParseException {
    Token start, end;
    Cmd exp;
    SortKey key;
    List<SortKey> keys = null;
    List<QueryControl> controls;
    start = jj_consume_token(QUERYSORT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      exp = CompactExp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOREL:
      case NONE:
        key = SortKey();
                       keys = list(key);
        label_29:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MOREL:
          case NONE:
            ;
            break;
          default:
            jj_la1[113] = jj_gen;
            break label_29;
          }
          key = SortKey();
                         keys.add(key);
        }
        break;
      default:
        jj_la1[114] = jj_gen;
        ;
      }
     if (keys == null) keys = Collections.EMPTY_LIST;
      jj_consume_token(BAR);
      controls = QueryControls();
      end = jj_consume_token(RPAREN);
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      exp = CompactExp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOREL:
      case NONE:
        key = SortKey();
                       keys = list(key);
        label_30:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MOREL:
          case NONE:
            ;
            break;
          default:
            jj_la1[115] = jj_gen;
            break label_30;
          }
          key = SortKey();
                         keys.add(key);
        }
        break;
      default:
        jj_la1[116] = jj_gen;
        ;
      }
     if (keys == null) keys = Collections.EMPTY_LIST;
      jj_consume_token(BAR);
      controls = QueryControls();
      end = jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[117] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return QueryDesugarer.sort(start, end, controls, exp, keys);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////QuerySort
  final public SortKey SortKey() throws ParseException {
    Token start;
    SortOrder ord;
    Cmd key;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOREL:
      start = jj_consume_token(MOREL);
                    ord = SortOrder.DESCENDING;
      break;
    case NONE:
      start = jj_consume_token(NONE);
                    ord = SortOrder.ASCENDING;
      break;
    default:
      jj_la1[118] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    key = CompactExp();
   {if (true) return new SortKey(start, key.end, ord, key);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////SortKey


////////////////////////////////////////////////////////////////
// Exp bits for patterns 
////////////////////////////////////////////////////////////////
  final public ItExp ItExp() throws ParseException {
    Token it;
    it = jj_consume_token(IT);
   {if (true) return new ItExp(it, it);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ItExp
  final public WildcardExp WildcardExp() throws ParseException {
    Token wi;
    wi = jj_consume_token(WILD);
   {if (true) return new WildcardExp(wi,wi);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////WildcardExp
  final public DotMethodCallExp DotMethodCallExp() throws ParseException {
    Token start, end;
    Id methodName;
    Cmd arg = null;
    start = jj_consume_token(DOT);
    methodName = Id();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case ELLIPSIS:
    case PLUS:
    case LPAREN:
    case LBRACKET:
    case LBRACE:
    case MINUS:
    case LRECBRACE:
    case DOLLARLPAREN:
    case PROBE:
    case WILD:
    case METHODLY1:
    case TABLE:
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
    case VALOF:
    case OBJECT:
    case THIS:
    case SPAWN:
    case IT:
    case NOT:
    case SUPER:
    case MAP:
    case ORD:
    case NULL:
    case TRUE:
    case FALSE:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      arg = CompactExp();
      break;
    default:
      jj_la1[119] = jj_gen;
      ;
    }
    end = jj_consume_token(RPAREN);
   {if (true) return new DotMethodCallExp(start,end, methodName, arg);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////DotMethodCallExp
  final public InterpolationExp InterpolationExp() throws ParseException {
    Cmd e;
    Token start, end;
    start = jj_consume_token(DOLLARLPAREN);
    e = BiggishExp();
    end = jj_consume_token(RPAREN);
   {if (true) return new InterpolationExp(start, end, e);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////InterpolationExp

////////////////////////////////////////////////////////////////
// Stmt bits
////////////////////////////////////////////////////////////////
  final public Valof Valof() throws ParseException {
    List<Cmd> cmds = null;
    Cmd cmd;
    Token start, end;
    start = jj_consume_token(VALOF);
    jj_consume_token(LBRACE);
   cmds = new ArrayList<Cmd>(2);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case ELLIPSIS:
      case PLUS:
      case LPAREN:
      case LBRACKET:
      case LBRACE:
      case MINUS:
      case LRECBRACE:
      case DOLLARLPAREN:
      case PROBE:
      case WILD:
      case METHODLY1:
      case TABLE:
      case QUERYSWISS:
      case FIRST:
      case QIF:
      case QUERYAFTER:
      case QUERYLIST:
      case COUNT:
      case EVERY:
      case SOME:
      case QUERYSORT:
      case QUERYTABLE:
      case QUERYGROUP:
      case VALOF:
      case COMPONENT:
      case CLASS:
      case OBJECT:
      case THIS:
      case NEW:
      case SPAWN:
      case IT:
      case SERVE:
      case ALIAS:
      case IMPORT:
      case NOT:
      case SUPER:
      case MAP:
      case ORD:
      case BREAK:
      case CONTINUE:
      case FUN:
      case FN:
      case THROW:
      case TRY:
      case NULL:
      case TRUE:
      case FALSE:
      case VAR:
      case MATCH:
      case IF:
      case UNLESS:
      case FOR:
      case WHILE:
      case SIGNATURE:
      case DO:
      case UNTIL:
      case RETURN:
      case RECV:
      case HEXINT:
      case OCTINT:
      case BININT:
      case ID1:
      case ID2:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        ;
        break;
      default:
        jj_la1[120] = jj_gen;
        break label_31;
      }
      cmd = Stmt(null,null);
                            cmds.add(cmd);
    }
    end = RbraceOf("valof");
   {if (true) return new Valof(start, end, cmds, false);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Valof
  final public Break Break() throws ParseException {
    Token start, end;
    Id id = null;
    start = jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID1:
    case ID2:
      id = Id();
      break;
    default:
      jj_la1[121] = jj_gen;
      ;
    }
    end = jj_consume_token(SEMI);
   {if (true) return new Break(start, end, id);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Break
  final public Continue Continue() throws ParseException {
    Token start, end;
    Id id = null;
    start = jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID1:
    case ID2:
      id = Id();
      break;
    default:
      jj_la1[122] = jj_gen;
      ;
    }
    end = jj_consume_token(SEMI);
   {if (true) return new Continue(start, end, id);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Continue
  final public ServeBlock ServeBlock(String name, Token start) throws ParseException {
    Id a=null, b=null;
    Cmd body;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      a = Id();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        b = Id();
        break;
      default:
        jj_la1[123] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[124] = jj_gen;
      ;
    }
    body = SeqOf(name);
   {if (true) return
   new ServeBlock(start, body.end, name,
     a == null ? Collections.EMPTY_LIST
     : b == null ? list(a)
     : list(a,b),
    body);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ServeBlock
  final public Serve Serve() throws ParseException {
    Token start, end, x;
    Id msg, snd;
    ServeBlock before=null, after=null;
    Cmd beforeCmd, afterCmd, timeout = null, timeoutCmd = null;
    List<Case> cases = Collections.EMPTY_LIST;
    start = jj_consume_token(SERVE);
                   end = start;
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEFORE:
      case AFTER:
      case CATCH:
      case TIMEOUT:
        ;
        break;
      default:
        jj_la1[125] = jj_gen;
        break label_32;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEFORE:
        x = jj_consume_token(BEFORE);
      if (before != null) {if (true) throw error(start, x, "Can't have two before clauses in one serve.");}
        before = ServeBlock("before", x);
      end = before.end;
        break;
      case AFTER:
        x = jj_consume_token(AFTER);
      if (after != null) {if (true) throw error(start, x, "Can't have two after clauses in one serve.");}
        after = ServeBlock("after", x);
      end = after.end;
        break;
      case CATCH:
        x = jj_consume_token(CATCH);
      if (!cases.isEmpty()) {if (true) throw error(start, x, "Can't have two catch clauses in one serve.");}
        jj_consume_token(LBRACE);
        cases = Cases();
        end = RbraceOf("catch");
        break;
      case TIMEOUT:
        x = jj_consume_token(TIMEOUT);
     if (timeout != null) {if (true) throw error(start, x, "Can't have two timeout clauses in one serve.");}
        jj_consume_token(LPAREN);
        timeout = CompactExp();
        end = jj_consume_token(RPAREN);
        timeoutCmd = SeqOf("timeout");
        break;
      default:
        jj_la1[126] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      end = jj_consume_token(SEMI);
      break;
    default:
      jj_la1[127] = jj_gen;
      ;
    }
   {if (true) return new Serve(start, end, before, after, timeout, timeoutCmd, cases);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Serve
  final public VarDecl VarDecl() throws ParseException {
    Token start, end;
    Id id;
    Cmd init = null;
    TypeConstraints tcs = null;
    start = jj_consume_token(VAR);
    id = Id();
    tcs = TypeConstraints(start);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GETS:
      jj_consume_token(GETS);
      init = BiggishExp();
      break;
    default:
      jj_la1[128] = jj_gen;
      ;
    }
    end = jj_consume_token(SEMI);
   {if (true) return new VarDecl(start, end, id, init, tcs);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////VarDecl
  final public If If() throws ParseException {
    Token start, end;
    Cmd test, thenarm, elsearm=null;
    boolean reallyUnless = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      start = jj_consume_token(IF);
                 reallyUnless = false;
      break;
    case UNLESS:
      start = jj_consume_token(UNLESS);
                                                            reallyUnless = true;
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    test = BiggishExp();
    jj_consume_token(RPAREN);
    thenarm = Stmt(start.image,null);
                                    end = thenarm.end;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elsearm = Stmt(start.image,"else");
                                         end = elsearm.end;
      break;
    default:
      jj_la1[130] = jj_gen;
      ;
    }
    {if (true) return new If(start, end, test, thenarm, elsearm, reallyUnless, false);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////If
  final public Seq Seq() throws ParseException {
    Token start, end;
    List<Cmd> cmds = null;
    Cmd cmd;
    start = jj_consume_token(LBRACE);
   cmds = new ArrayList<Cmd>(2);
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case ELLIPSIS:
      case PLUS:
      case LPAREN:
      case LBRACKET:
      case LBRACE:
      case MINUS:
      case LRECBRACE:
      case DOLLARLPAREN:
      case PROBE:
      case WILD:
      case METHODLY1:
      case TABLE:
      case QUERYSWISS:
      case FIRST:
      case QIF:
      case QUERYAFTER:
      case QUERYLIST:
      case COUNT:
      case EVERY:
      case SOME:
      case QUERYSORT:
      case QUERYTABLE:
      case QUERYGROUP:
      case VALOF:
      case COMPONENT:
      case CLASS:
      case OBJECT:
      case THIS:
      case NEW:
      case SPAWN:
      case IT:
      case SERVE:
      case ALIAS:
      case IMPORT:
      case NOT:
      case SUPER:
      case MAP:
      case ORD:
      case BREAK:
      case CONTINUE:
      case FUN:
      case FN:
      case THROW:
      case TRY:
      case NULL:
      case TRUE:
      case FALSE:
      case VAR:
      case MATCH:
      case IF:
      case UNLESS:
      case FOR:
      case WHILE:
      case SIGNATURE:
      case DO:
      case UNTIL:
      case RETURN:
      case RECV:
      case HEXINT:
      case OCTINT:
      case BININT:
      case ID1:
      case ID2:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        ;
        break;
      default:
        jj_la1[131] = jj_gen;
        break label_33;
      }
      cmd = Stmt(null,null);
                            cmds.add(cmd);
    }
    end = Rbrace();
   {if (true) return new Seq(start, end, cmds);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Seq
  final public Cmd SeqOf(String s) throws ParseException {
    Token start, end;
    List<Cmd> cmds = null;
    Cmd cmd;
    start = jj_consume_token(LBRACE);
   cmds = new ArrayList<Cmd>(2);
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case ELLIPSIS:
      case PLUS:
      case LPAREN:
      case LBRACKET:
      case LBRACE:
      case MINUS:
      case LRECBRACE:
      case DOLLARLPAREN:
      case PROBE:
      case WILD:
      case METHODLY1:
      case TABLE:
      case QUERYSWISS:
      case FIRST:
      case QIF:
      case QUERYAFTER:
      case QUERYLIST:
      case COUNT:
      case EVERY:
      case SOME:
      case QUERYSORT:
      case QUERYTABLE:
      case QUERYGROUP:
      case VALOF:
      case COMPONENT:
      case CLASS:
      case OBJECT:
      case THIS:
      case NEW:
      case SPAWN:
      case IT:
      case SERVE:
      case ALIAS:
      case IMPORT:
      case NOT:
      case SUPER:
      case MAP:
      case ORD:
      case BREAK:
      case CONTINUE:
      case FUN:
      case FN:
      case THROW:
      case TRY:
      case NULL:
      case TRUE:
      case FALSE:
      case VAR:
      case MATCH:
      case IF:
      case UNLESS:
      case FOR:
      case WHILE:
      case SIGNATURE:
      case DO:
      case UNTIL:
      case RETURN:
      case RECV:
      case HEXINT:
      case OCTINT:
      case BININT:
      case ID1:
      case ID2:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        ;
        break;
      default:
        jj_la1[132] = jj_gen;
        break label_34;
      }
      cmd = Stmt(null,null);
                            cmds.add(cmd);
    }
    end = RbraceOf(s);
   {if (true) return new Seq(start, end, cmds);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Seq
  final public Cmd SeqOf2(String s,String s2) throws ParseException {
    Token start, end;
    List<Cmd> cmds = null;
    Cmd cmd;
    start = jj_consume_token(LBRACE);
   cmds = new ArrayList<Cmd>(2);
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case ELLIPSIS:
      case PLUS:
      case LPAREN:
      case LBRACKET:
      case LBRACE:
      case MINUS:
      case LRECBRACE:
      case DOLLARLPAREN:
      case PROBE:
      case WILD:
      case METHODLY1:
      case TABLE:
      case QUERYSWISS:
      case FIRST:
      case QIF:
      case QUERYAFTER:
      case QUERYLIST:
      case COUNT:
      case EVERY:
      case SOME:
      case QUERYSORT:
      case QUERYTABLE:
      case QUERYGROUP:
      case VALOF:
      case COMPONENT:
      case CLASS:
      case OBJECT:
      case THIS:
      case NEW:
      case SPAWN:
      case IT:
      case SERVE:
      case ALIAS:
      case IMPORT:
      case NOT:
      case SUPER:
      case MAP:
      case ORD:
      case BREAK:
      case CONTINUE:
      case FUN:
      case FN:
      case THROW:
      case TRY:
      case NULL:
      case TRUE:
      case FALSE:
      case VAR:
      case MATCH:
      case IF:
      case UNLESS:
      case FOR:
      case WHILE:
      case SIGNATURE:
      case DO:
      case UNTIL:
      case RETURN:
      case RECV:
      case HEXINT:
      case OCTINT:
      case BININT:
      case ID1:
      case ID2:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        ;
        break;
      default:
        jj_la1[133] = jj_gen;
        break label_35;
      }
      cmd = Stmt(null,null);
                            cmds.add(cmd);
    }
    end = RbraceOf2(s,s2);
   {if (true) return new Seq(start, end, cmds);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Seq
  final public Return Return() throws ParseException {
    Token start, end;
    Cmd exp = null;
    start = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case ELLIPSIS:
    case PLUS:
    case LPAREN:
    case LBRACKET:
    case LBRACE:
    case MINUS:
    case LRECBRACE:
    case DOLLARLPAREN:
    case PROBE:
    case WILD:
    case METHODLY1:
    case TABLE:
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
    case VALOF:
    case OBJECT:
    case THIS:
    case SPAWN:
    case IT:
    case NOT:
    case SUPER:
    case MAP:
    case ORD:
    case FN:
    case NULL:
    case TRUE:
    case FALSE:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      exp = BiggishExp();
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
    end = jj_consume_token(SEMI);
   {if (true) return new Return(start, end, exp);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Return
  final public Signature Signature() throws ParseException {
    Cmd body;
    Id label = null;
    Token start, sigToken;
    int sig;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID1:
    case ID2:
      label = Id();
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[135] = jj_gen;
      ;
    }
    start = jj_consume_token(SIGNATURE);
                         if (label != null) start = label.start;
    jj_consume_token(LPAREN);
    sigToken = jj_consume_token(INT);
   sig = Integer.parseInt(sigToken.image);
    jj_consume_token(RPAREN);
    body = StmtWithOptSemi("signature", label.str());
   {if (true) return new Signature(start, body.end, label, sig, body);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Signature
  final public While While() throws ParseException {
    Cmd test, body;
    boolean isuntil;
    Id label = null;
    String lblName = null;
    Token start, end;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID1:
    case ID2:
      label = Id();
      jj_consume_token(COLON);
                         lblName = label.str();
      break;
    default:
      jj_la1[136] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
    case UNTIL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        start = jj_consume_token(WHILE);
                      isuntil = false;
        break;
      case UNTIL:
        start = jj_consume_token(UNTIL);
                                                          isuntil = true;
        break;
      default:
        jj_la1[137] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     if (label != null) start = label.start;
      jj_consume_token(LPAREN);
      test = BiggishExp();
      jj_consume_token(RPAREN);
      body = StmtWithOptSemi(isuntil ? "until" : "while", lblName);
     end = body.end;
     {if (true) return new While(start, end, label, test, body, isuntil, false);}
      break;
    case DO:
      start = jj_consume_token(DO);
     if (label != null) start = label.start;
      body = Stmt("do", lblName);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        jj_consume_token(WHILE);
              isuntil = false;
        break;
      case UNTIL:
        jj_consume_token(UNTIL);
                                          isuntil = true;
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAREN);
      test = BiggishExp();
      end = jj_consume_token(RPAREN);
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMI:
          ;
          break;
        default:
          jj_la1[139] = jj_gen;
          break label_36;
        }
        end = jj_consume_token(SEMI);
      }
     {if (true) return new While(start, end, label, test, body, isuntil, true);}
      break;
    default:
      jj_la1[140] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////While
  final public For For() throws ParseException {
    Id label = null;
    String lblName = null;
    Token start, end;
    boolean inquisitive;
    Cmd patcmd, list, body;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID1:
    case ID2:
      label = Id();
      jj_consume_token(COLON);
                        lblName = label.str();
      break;
    default:
      jj_la1[141] = jj_gen;
      ;
    }
    start = jj_consume_token(FOR);
  if (label != null) start = label.start;
    jj_consume_token(LPAREN);
    patcmd = CompactExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ITER_DEM:
      jj_consume_token(ITER_DEM);
               inquisitive = false;
      break;
    case ITER_INQ:
      jj_consume_token(ITER_INQ);
               inquisitive = true;
      break;
    default:
      jj_la1[142] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    list = CompactExp();
    jj_consume_token(RPAREN);
    body = Stmt("for", lblName);
  {if (true) return new For(start, body.end,label,  pattern(patcmd), list, body, inquisitive);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////For
  final public FunDecl FunDecl() throws ParseException {
    Token start;
    Id id;
    FunBody funbody = null;
    start = jj_consume_token(FUN);
    funbody = FunBody("fun", false);
    {if (true) return new FunDecl(start, funbody.end, funbody.id(), funbody, funbody.isMarkedPure());}
    throw new Error("Missing return statement in function");
  }

 //////////////////////FunDecl
  final public FunBody FunBody(String keyword, boolean withDist) throws ParseException {
    MonoBody mb;
    List<MonoBody> mbs=null;
    String funname;
    boolean pure;
    mb = MonoBodyStmt(keyword, null, withDist);
                                              mbs = list(mb);
   funname = mb.funname(); pure = mb.isMarkedPure();
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BAR:
        ;
        break;
      default:
        jj_la1[143] = jj_gen;
        break label_37;
      }
      jj_consume_token(BAR);
      mb = MonoBodyStmt(keyword, funname, withDist);
                                                         mbs.add(mb); pure |= mb.isMarkedPure();
    }
   {if (true) return new FunBody(mbs.get(0).start, last(mbs).end, mbs, pure);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////FunBody
  final public MonoBody MonoBodyStmt(String keyword, String funname, boolean withDist) throws ParseException {
    Formals formals = null;
    Token a = null;
    Token start = null;
    Id id;
    Token end;
    Cmd e;
    Cmd fromExp = null;
    Cmd envelopeExp = null;
    Pat fromPat = null;
    Pat envelopePat = null;
    boolean checked = false;
    boolean hasPrio = false;
    int prio = 0;
    Token prioToken = null;
    boolean pure = false;
    id = MethodNameId();
                       start = id.start;
   if (funname != null && !(funname.equals(id.str()))) {
     {if (true) throw error(id.start, id.end,
       "Currently defining function " + funname + ", but this clause "
       + "is for " + id);}
    }
   funname = id.str();
    if (jj_2_18(5)) {
      formals = Formals();
    } else {
      ;
    }
   if (formals == null) formals = new Formals(start,start, Collections.EMPTY_LIST);
    pure = Purity();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
      jj_consume_token(FROM);
      fromExp = CompactExp();
     fromPat = pattern(fromExp);
     if (! withDist) error(fromExp.start, fromExp.end,
        "This function cannot have a 'from' clause.");
      break;
    default:
      jj_la1[144] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENVELOPE:
      jj_consume_token(ENVELOPE);
      envelopeExp = CompactExp();
     envelopePat = pattern(envelopeExp);
     if (! withDist) error(envelopeExp.start, envelopeExp.end,
        "This function cannot have an 'envelope' clause.");
      break;
    default:
      jj_la1[145] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIO:
      jj_consume_token(PRIO);
      prioToken = jj_consume_token(INT);
      hasPrio = true; prio = Integer.parseInt(prioToken.image);
      if (! withDist) error (prioToken, prioToken,
         "This function cannot have a 'prio' clause.");
      break;
    default:
      jj_la1[146] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHECKED:
      jj_consume_token(CHECKED);
     checked = true;
      break;
    default:
      jj_la1[147] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      if (jj_2_19(5)) {
        e = CompactExp();
        end = jj_consume_token(SEMI);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          e = SeqOf2(keyword, funname);
                                    end = e.end;
          break;
        default:
          jj_la1[148] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case LBRACE:
      e = SeqOf2(keyword, funname);
                                  end = e.end;
      break;
    default:
      jj_la1[149] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return new MonoBody(start, end, id, formals, fromPat, envelopePat, hasPrio, prio, e, checked, pure);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////MonoBody

////////////////////////////////////////////////////////////////
// Case, Match, Try 
////////////////////////////////////////////////////////////////
  final public Case Case() throws ParseException {
    Cmd patexp;
    Pat pat;
    Token prioToken = null;
    int prio = 0;
    Cmd fromExp = null;
    Pat from = null;
    Cmd envelopeExp = null;
    Pat envelope = null;
    boolean hasPrio = false;
    boolean checked = false;
    Cmd body = null;
    patexp = CompactExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
      jj_consume_token(FROM);
      fromExp = CompactExp();
      from = pattern(fromExp);
      break;
    default:
      jj_la1[150] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENVELOPE:
      jj_consume_token(ENVELOPE);
      envelopeExp = CompactExp();
      envelope = pattern(envelopeExp);
      break;
    default:
      jj_la1[151] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIO:
      jj_consume_token(PRIO);
      hasPrio = true;
      prioToken = jj_consume_token(INT);
      prio = Integer.parseInt(prioToken.image);
      break;
    default:
      jj_la1[152] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHECKED:
      jj_consume_token(CHECKED);
               checked = true;
      break;
    default:
      jj_la1[153] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      break;
    case ARROW2R:
      jj_consume_token(ARROW2R);
      break;
    default:
      jj_la1[154] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    body = ExpOrBlock();
   {if (true) return new Case(patexp.start, body.end, pattern(patexp), from, envelope, hasPrio, prio, checked, body);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Case
  final public List<Case> Cases() throws ParseException {
    Case c;
    List<Case> cases = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BAR:
      jj_consume_token(BAR);
      break;
    default:
      jj_la1[155] = jj_gen;
      ;
    }
    c = Case();
                cases = list(c);
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BAR:
        ;
        break;
      default:
        jj_la1[156] = jj_gen;
        break label_38;
      }
      jj_consume_token(BAR);
      c = Case();
                      cases.add(c);
    }
   {if (true) return cases;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Cases
  final public Match Match() throws ParseException {
    Token start, end = null;
    Cmd subject;
    List<Case> cases = null;
    start = jj_consume_token(MATCH);
    subject = CompactExp();
    jj_consume_token(LBRACE);
    cases = Cases();
    end = RbraceOf("match");
   {if (true) return new Match(start, end, subject, cases);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Match
  final public Throw Throw() throws ParseException {
    Token start, end;
    Cmd exn;
    start = jj_consume_token(THROW);
    exn = BiggishExp();
    end = jj_consume_token(SEMI);
   {if (true) return new Throw(start, end, exn);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Throw
  final public Try Try() throws ParseException {
   Token start, end = null;
   Cmd body;
   Case c = null;
   List<Case> cases = null;
   Cmd fin = null;
    start = jj_consume_token(TRY);
    body = Seq();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CATCH:
      jj_consume_token(CATCH);
      jj_consume_token(LBRACE);
      cases = Cases();
      end = RbraceOf2("try", "catch");
      break;
    default:
      jj_la1[157] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      jj_consume_token(FINALLY);
      fin = Seq();
     end = fin.end;
      break;
    default:
      jj_la1[158] = jj_gen;
      ;
    }
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        ;
        break;
      default:
        jj_la1[159] = jj_gen;
        break label_39;
      }
      jj_consume_token(SEMI);
    }
    if (cases == null && fin == null) {
      error(start, body.end,
        "a 'try' must have a 'catch' or a 'finally' (or both)");
    }
    assert(end != null);
    if (cases == null) cases = Collections.EMPTY_LIST;
    {if (true) return new Try(start, end, body, cases, fin);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Try

////////////////////////////////////////////////////////////////
// Object and Class
////////////////////////////////////////////////////////////////
  final public ClassMember ClassMember() throws ParseException {
     MethDecl fd;
     Cmd e = null, f=null;
     Token start = null, end = null;
     Id id = null;
     Formals formals;
     ClassMember mem;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METH:
      fd = MethDecl();
                     {if (true) return fd;}
      break;
    case DOT:
    case ELLIPSIS:
    case PLUS:
    case LPAREN:
    case LBRACKET:
    case LBRACE:
    case MINUS:
    case LRECBRACE:
    case DOLLARLPAREN:
    case PROBE:
    case WILD:
    case METHODLY1:
    case TABLE:
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
    case VALOF:
    case OBJECT:
    case THIS:
    case SPAWN:
    case IT:
    case NOT:
    case SUPER:
    case MAP:
    case ORD:
    case NULL:
    case TRUE:
    case FALSE:
    case VAL:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      mem = Bind(false);
                        {if (true) return mem;}
      break;
    case NEW:
      mem = ClsCtorDef();
                        {if (true) return mem;}
      break;
    case VAR:
      mem = VarDecl();
                     {if (true) return mem;}
      break;
    case IMPORT:
      mem = ImportStmt();
                        {if (true) return mem;}
      break;
    default:
      jj_la1[160] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////ClassMember
  final public ObjectMember ObjectMember() throws ParseException {
    ObjectMember om;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METH:
      om = MethDecl();
      break;
    case DOT:
    case ELLIPSIS:
    case PLUS:
    case LPAREN:
    case LBRACKET:
    case LBRACE:
    case MINUS:
    case LRECBRACE:
    case DOLLARLPAREN:
    case PROBE:
    case WILD:
    case METHODLY1:
    case TABLE:
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
    case VALOF:
    case OBJECT:
    case THIS:
    case SPAWN:
    case IT:
    case NOT:
    case SUPER:
    case MAP:
    case ORD:
    case NULL:
    case TRUE:
    case FALSE:
    case VAL:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      om = Bind(true);
      break;
    case VAR:
      om = VarDecl();
      break;
    case IMPORT:
      om = ImportStmt();
      break;
    default:
      jj_la1[161] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return om;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ObjectMember
  final public ClsCtorDef ClsCtorDef() throws ParseException {
    Token start, end;
    Id id = null;
    Formals formals;
    Cmd e;
    MonoBody monobody;
    boolean pure;
    start = jj_consume_token(NEW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID1:
    case ID2:
      id = Id();
      break;
    default:
      jj_la1[162] = jj_gen;
      ;
    }
    formals = Formals();
    pure = Purity();
    if (jj_2_20(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        break;
      default:
        jj_la1[163] = jj_gen;
        ;
      }
      e = SeqOf("new");
                        end = e.end;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        end = jj_consume_token(SEMI);
        break;
      default:
        jj_la1[164] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        e = CompactExp();
        end = jj_consume_token(SEMI);
        break;
      default:
        jj_la1[165] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      monobody = new MonoBody(e.start, e.end, id, formals, null, null, false, 0, e, false, pure);
      {if (true) return new ClsCtorDef(start, end, id, monobody);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ClsCtorDef

//snick//ClsVarFieldDecl /*&*/ClsVarFieldDecl():
//snick//  { Token start, end;
//snick//    Id id;
//snick//    Cmd e = null;
//snick//  }
//snick//{
//snick//    start = <VAR>
//snick//    id = Id() 
//snick//    [ 
//snick//      (<EQUALS> | <GETS>)
//snick//      e = Exp()
//snick//    ]
//snick//    end = <SEMI>
//snick//    {return new ClsVarFieldDecl(start, end, id, e);}
//snick//
//snick//}//////////////////////ClsVarFieldDecl
//snick//

//snick//ClsValFieldDecl /*&*/ClsValFieldDecl():
//snick//  {
//snick//    Token start = null, end;
//snick//    Cmd e, f = null;
//snick//  }
//snick//{
//snick//    [start = <VAL>]
//snick//    e = CompactExp()
//snick//    {if (start == null) start = e.start;}
//snick//    [
//snick//      <EQUALS> f = Exp() 
//snick//    ]
//snick//    end = <SEMI>
//snick//    {return new ClsValFieldDecl(start == null ? e.start : start, end, pattern(e), f);}    
//snick//}//////////////////////ClsValFieldDecl
//snick//
  final public MethDecl MethDecl() throws ParseException {
    Token start;
    Id id;
    FunBody funbody = null;
    start = jj_consume_token(METH);
    funbody = FunBody(start.image, false);
    {if (true) return new MethDecl(start, funbody.end, funbody.id(), funbody, funbody.isMarkedPure());}
    throw new Error("Missing return statement in function");
  }

 //////////////////////MethDecl


//PAT// ClsPatDef /*&*/ClsPatDef():
//PAT//   {
//PAT//     Token start, end;
//PAT//     Id name;
//PAT//     Id formal; 
//PAT//     List<Id> formals = Collections.EMPTY_LIST;
//PAT//     Cmd body;
//PAT//   }
//PAT// {
//PAT//   start = <PAT>
//PAT//   name = Id()
//PAT//   <LPAREN>
//PAT//   formals = Ids()
//PAT// /*  [
//PAT//     formal = Id() {formals = list(formal);}
//PAT//     (<COMMA> formal = Id() { formals.add(formal); })*
//PAT//   ]
//PAT// */
//PAT//   <RPAREN>
//PAT//   [ <EQUALS> ] 
//PAT//   body = SeqOf2("pat", name.str())
//PAT//   {return new ClsPatDef(start, body.end, name, formals, body);}
//PAT// 
//PAT// }//////////////////////ClsPatDef
  final public List<ClassMember> ClassMembers() throws ParseException {
    ClassMember mem;
    List<ClassMember> members = new ArrayList<ClassMember>(4);
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case ELLIPSIS:
      case PLUS:
      case LPAREN:
      case LBRACKET:
      case LBRACE:
      case MINUS:
      case LRECBRACE:
      case DOLLARLPAREN:
      case PROBE:
      case WILD:
      case METHODLY1:
      case TABLE:
      case QUERYSWISS:
      case FIRST:
      case QUERYAFTER:
      case QUERYLIST:
      case COUNT:
      case EVERY:
      case SOME:
      case QUERYSORT:
      case QUERYTABLE:
      case QUERYGROUP:
      case VALOF:
      case METH:
      case OBJECT:
      case THIS:
      case NEW:
      case SPAWN:
      case IT:
      case IMPORT:
      case NOT:
      case SUPER:
      case MAP:
      case ORD:
      case NULL:
      case TRUE:
      case FALSE:
      case VAR:
      case VAL:
      case HEXINT:
      case OCTINT:
      case BININT:
      case ID1:
      case ID2:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        ;
        break;
      default:
        jj_la1[166] = jj_gen;
        break label_40;
      }
      mem = ClassMember();
                         members.add(mem);
    }
   {if (true) return members;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ClassMembers
  final public ClsExtends ClsExtends1() throws ParseException {
     QualName qn;
     List<Cmd> actuals = null;
     Token end = null;
     Token[] ender;
    qn = QualName(1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      ender = new Token[1];
      actuals = ActualsPlusRparen(ender);
      end = ender[0];
      break;
    default:
      jj_la1[167] = jj_gen;
      ;
    }
    if (actuals== null) {
       actuals = Collections.EMPTY_LIST;
       end = qn.end;
    }
   {if (true) return new ClsExtends(qn.start, end, qn, actuals);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ClsExtends1
  final public List<ClsExtends> ClsExtendsClause() throws ParseException {
     ClsExtends e;
     List<ClsExtends> ext = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      e = ClsExtends1();
                        ext = list(e);
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[168] = jj_gen;
          break label_41;
        }
        jj_consume_token(COMMA);
        e = ClsExtends1();
                          ext.add(e);
      }
      {if (true) return ext;}
      break;
    default:
      jj_la1[169] = jj_gen;
      ;
    }
   {if (true) return Collections.EMPTY_LIST;}
    throw new Error("Missing return statement in function");
  }

//////////////////////ClsExtendsClause
  final public List<ObjectMember> ObjectMembers() throws ParseException {
    ObjectMember mem;
    List<ObjectMember> members = new ArrayList<ObjectMember>(4);
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case ELLIPSIS:
      case PLUS:
      case LPAREN:
      case LBRACKET:
      case LBRACE:
      case MINUS:
      case LRECBRACE:
      case DOLLARLPAREN:
      case PROBE:
      case WILD:
      case METHODLY1:
      case TABLE:
      case QUERYSWISS:
      case FIRST:
      case QUERYAFTER:
      case QUERYLIST:
      case COUNT:
      case EVERY:
      case SOME:
      case QUERYSORT:
      case QUERYTABLE:
      case QUERYGROUP:
      case VALOF:
      case METH:
      case OBJECT:
      case THIS:
      case SPAWN:
      case IT:
      case IMPORT:
      case NOT:
      case SUPER:
      case MAP:
      case ORD:
      case NULL:
      case TRUE:
      case FALSE:
      case VAR:
      case VAL:
      case HEXINT:
      case OCTINT:
      case BININT:
      case ID1:
      case ID2:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        ;
        break;
      default:
        jj_la1[170] = jj_gen;
        break label_42;
      }
      mem = ObjectMember();
                          members.add(mem);
    }
   {if (true) return members;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ObjectMembers
  final public AnonObj AnonObj() throws ParseException {
     Token start, end;
     List<ClsExtends> ext = null;
     List<ObjectMember> members = null;
     boolean isMarkedPure = false;
    start = jj_consume_token(OBJECT);
    isMarkedPure = Purity();
    ext = ClsExtendsClause();
    jj_consume_token(LBRACE);
    members = ObjectMembers();
    end = RbraceOf("object");
     Cmd desugared = AnonObjDesugarer.of(start, end, ext, members, isMarkedPure);
     {if (true) return new AnonObj(start, end, ext, members, isMarkedPure, desugared);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////AnonObj
  final public ClassFormal ClassFormal() throws ParseException {
    Token start= null;
    Id name;
    boolean isVar = false;
    TypeConstraints tc;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      start = jj_consume_token(VAR);
                  isVar = true;
      break;
    default:
      jj_la1[171] = jj_gen;
      ;
    }
    name = Id();
    tc = TypeConstraints(name.start);
   {if (true) return new ClassFormal(isVar ? start : name.start, name.end, name, isVar, tc);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ClassFormal
  final public List<ClassFormal> ClassFormals() throws ParseException {
    ClassFormal cf;
    List<ClassFormal> p = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case ID1:
      case ID2:
        cf = ClassFormal();
                          p = list(cf);
        label_43:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[172] = jj_gen;
            break label_43;
          }
          jj_consume_token(COMMA);
          cf = ClassFormal();
                            p.add(cf);
        }
        break;
      default:
        jj_la1[173] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[174] = jj_gen;
      ;
    }
   {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ClassFormals
  final public ClsDecl ClsDecl() throws ParseException {
    boolean isMarkedPure = false;
    Token start = null, cls, val, end;
    Id name;
    List<ClassFormal> params = null;
    boolean hasParams = false;
    List<ClsExtends> ext = null;
    List<ClassMember> members = null;
    cls = jj_consume_token(CLASS);
                 start = cls;
    name = Id();
    params = ClassFormals();
   if (params!=null) {
     hasParams=true;
     }
   else {hasParams=false; params=Collections.EMPTY_LIST;}
    isMarkedPure = Purity();
    ext = ClsExtendsClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      members = ClassMembers();
      end = RbraceOf2("class", name.str());
      label_44:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMI:
          ;
          break;
        default:
          jj_la1[175] = jj_gen;
          break label_44;
        }
        end = jj_consume_token(SEMI);
      }
      break;
    case SEMI:
      end = jj_consume_token(SEMI);
     members = list();
      break;
    default:
      jj_la1[176] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   AddImplicitClassMembers.to(members, start, end, name, hasParams, params, ext, isMarkedPure);
   {if (true) return new ClsDecl(start, end, isMarkedPure, name, hasParams, params, ext, members);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ClsDecl


////////////////////////////////////////////////////////////////
// import ; modules
////////////////////////////////////////////////////////////////   
  final public ModArgBinding ModArgBinding() throws ParseException {
    Id formal;
    QualName actual;
    formal = Id();
    jj_consume_token(EQUALS);
    actual = QualName(1);
    {if (true) return new ModArgBinding(formal.start, actual.end, formal, actual);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ModArgBinding

//OLD//   
//OLD//   ImportStmt /*&*/ImportStmt():
//OLD//     {
//OLD//       boolean isOwn = false;
//OLD//       QualName modName;
//OLD//       ModArgBinding modArg;
//OLD//       List<ModArgBinding> bindings = null;
//OLD//       QualName as = null;
//OLD//       Token start, end;
//OLD//       boolean dotstar = false;
//OLD//     }
//OLD//   {
//OLD//     start = <IMPORT>
//OLD//     [ <OWN> {isOwn = true;}] 
//OLD//     modName = QualName(1)
//OLD//     [LOOKAHEAD(2)
//OLD//       <DOTSTAR> {dotstar = true;}
//OLD//     ]
//OLD//     {bindings = Collections.EMPTY_LIST;}
//OLD//     [
//OLD//       <LPAREN>
//OLD//       modArg = ModArgBinding() {bindings = list(modArg);}
//OLD//       (<COMMA> modArg = ModArgBinding() { bindings.add(modArg); })*
//OLD//       <RPAREN>
//OLD//     ]
//OLD//     [
//OLD//       <AS>
//OLD//       as = QualName(1)
//OLD//     ]
//OLD//     end = <SEMI>
//OLD//     {return new ImportStmt(start, end, isOwn, modName, bindings, as, dotstar);}
//OLD//   }//////////////////////ImportStmt
//OLD//   
  final public ImportStmt ImportStmt() throws ParseException {
    boolean isOwn = false;
    QualName modName;
    ModArgBinding modArg;
    List<ModArgBinding> bindings = null;
    Id as = null;
    Token start, end;
    boolean dotstar = false;
    start = jj_consume_token(IMPORT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OWN:
      jj_consume_token(OWN);
           isOwn = true;
      break;
    default:
      jj_la1[177] = jj_gen;
      ;
    }
    if (jj_2_21(3)) {
      as = Id();
      jj_consume_token(EQUALS);
    } else {
      ;
    }
    modName = QualName(1);
    if (jj_2_22(2)) {
      jj_consume_token(DOTSTAR);
               dotstar = true;
    } else {
      ;
    }
   bindings = Collections.EMPTY_LIST;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      modArg = ModArgBinding();
                              bindings = list(modArg);
      label_45:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[178] = jj_gen;
          break label_45;
        }
        jj_consume_token(COMMA);
        modArg = ModArgBinding();
                                        bindings.add(modArg);
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[179] = jj_gen;
      ;
    }
    end = jj_consume_token(SEMI);
   {if (true) return new ImportStmt(start, end, isOwn, modName, bindings, as, dotstar);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ImportStmt
  final public Alias Alias() throws ParseException {
    QualName oldname;
    QualName newname;
    Token start, end;
    start = jj_consume_token(ALIAS);
    oldname = QualName(1);
    jj_consume_token(EQUALS);
    newname = QualName(1);
    end = jj_consume_token(SEMI);
    {if (true) return new Alias(start, end, oldname, newname);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Alias


////////////////////////////////////////////////////////////////
// Module File
////////////////////////////////////////////////////////////////
  final public Module Module() throws ParseException {
    boolean isVal = false;
    Token start = null, modu, end;
    QualName moduleName;
    ModuleFileMember bit;
    List<ModuleFileMember> bits = Collections.EMPTY_LIST;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAL:
      start = jj_consume_token(VAL);
                   isVal = true;
      break;
    default:
      jj_la1[180] = jj_gen;
      ;
    }
    modu = jj_consume_token(MODULE);
                   if (start == null) start = modu;
    moduleName = QualName(1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case ELLIPSIS:
      case PLUS:
      case LPAREN:
      case LBRACKET:
      case LBRACE:
      case MINUS:
      case LRECBRACE:
      case DOLLARLPAREN:
      case PROBE:
      case WILD:
      case METHODLY1:
      case TABLE:
      case QUERYSWISS:
      case FIRST:
      case QUERYAFTER:
      case QUERYLIST:
      case COUNT:
      case EVERY:
      case SOME:
      case QUERYSORT:
      case QUERYTABLE:
      case QUERYGROUP:
      case VALOF:
      case COMPONENT:
      case CLASS:
      case OBJECT:
      case THIS:
      case SPAWN:
      case IT:
      case ALIAS:
      case IMPORT:
      case NOT:
      case SUPER:
      case MAP:
      case ORD:
      case PUBLIC:
      case PRIVATE:
      case MEMBER:
      case FUN:
      case NULL:
      case TRUE:
      case FALSE:
      case VAR:
      case VAL:
      case JAVALY:
      case HEXINT:
      case OCTINT:
      case BININT:
      case ID1:
      case ID2:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        bit = ModuleFileMember();
                              bits = list(bit);
        label_46:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
          case ELLIPSIS:
          case PLUS:
          case LPAREN:
          case LBRACKET:
          case LBRACE:
          case MINUS:
          case LRECBRACE:
          case DOLLARLPAREN:
          case PROBE:
          case WILD:
          case METHODLY1:
          case TABLE:
          case QUERYSWISS:
          case FIRST:
          case QUERYAFTER:
          case QUERYLIST:
          case COUNT:
          case EVERY:
          case SOME:
          case QUERYSORT:
          case QUERYTABLE:
          case QUERYGROUP:
          case VALOF:
          case COMPONENT:
          case CLASS:
          case OBJECT:
          case THIS:
          case SPAWN:
          case IT:
          case ALIAS:
          case IMPORT:
          case NOT:
          case SUPER:
          case MAP:
          case ORD:
          case PUBLIC:
          case PRIVATE:
          case MEMBER:
          case FUN:
          case NULL:
          case TRUE:
          case FALSE:
          case VAR:
          case VAL:
          case JAVALY:
          case HEXINT:
          case OCTINT:
          case BININT:
          case ID1:
          case ID2:
          case INT:
          case FLOAT:
          case STRING2:
          case STRING1:
          case STRING4:
          case STRING3:
            ;
            break;
          default:
            jj_la1[181] = jj_gen;
            break label_46;
          }
          bit = ModuleFileMember();
                                 bits.add(bit);
        }
        break;
      default:
        jj_la1[182] = jj_gen;
        ;
      }
      end = RbraceOf2("module" ,moduleName.last().str());
      break;
    case SEMI:
      jj_consume_token(SEMI);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case ELLIPSIS:
      case PLUS:
      case LPAREN:
      case LBRACKET:
      case LBRACE:
      case MINUS:
      case LRECBRACE:
      case DOLLARLPAREN:
      case PROBE:
      case WILD:
      case METHODLY1:
      case TABLE:
      case QUERYSWISS:
      case FIRST:
      case QUERYAFTER:
      case QUERYLIST:
      case COUNT:
      case EVERY:
      case SOME:
      case QUERYSORT:
      case QUERYTABLE:
      case QUERYGROUP:
      case VALOF:
      case COMPONENT:
      case CLASS:
      case OBJECT:
      case THIS:
      case SPAWN:
      case IT:
      case ALIAS:
      case IMPORT:
      case NOT:
      case SUPER:
      case MAP:
      case ORD:
      case PUBLIC:
      case PRIVATE:
      case MEMBER:
      case FUN:
      case NULL:
      case TRUE:
      case FALSE:
      case VAR:
      case VAL:
      case JAVALY:
      case HEXINT:
      case OCTINT:
      case BININT:
      case ID1:
      case ID2:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        bit = ModuleFileMember();
                              bits = list(bit);
        label_47:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
          case ELLIPSIS:
          case PLUS:
          case LPAREN:
          case LBRACKET:
          case LBRACE:
          case MINUS:
          case LRECBRACE:
          case DOLLARLPAREN:
          case PROBE:
          case WILD:
          case METHODLY1:
          case TABLE:
          case QUERYSWISS:
          case FIRST:
          case QUERYAFTER:
          case QUERYLIST:
          case COUNT:
          case EVERY:
          case SOME:
          case QUERYSORT:
          case QUERYTABLE:
          case QUERYGROUP:
          case VALOF:
          case COMPONENT:
          case CLASS:
          case OBJECT:
          case THIS:
          case SPAWN:
          case IT:
          case ALIAS:
          case IMPORT:
          case NOT:
          case SUPER:
          case MAP:
          case ORD:
          case PUBLIC:
          case PRIVATE:
          case MEMBER:
          case FUN:
          case NULL:
          case TRUE:
          case FALSE:
          case VAR:
          case VAL:
          case JAVALY:
          case HEXINT:
          case OCTINT:
          case BININT:
          case ID1:
          case ID2:
          case INT:
          case FLOAT:
          case STRING2:
          case STRING1:
          case STRING4:
          case STRING3:
            ;
            break;
          default:
            jj_la1[183] = jj_gen;
            break label_47;
          }
          bit = ModuleFileMember();
                                 bits.add(bit);
        }
        break;
      default:
        jj_la1[184] = jj_gen;
        ;
      }
      end = jj_consume_token(0);
      break;
    default:
      jj_la1[185] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return new Module(start, end, isVal, moduleName, bits);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Module
  final public ModuleFileMember ModuleFileMember() throws ParseException {
    ModuleFileMember mb;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MEMBER:
      mb = ModuleFileMemberStmt();
      break;
    case IMPORT:
      mb = ModuleFileImport();
      break;
    case PUBLIC:
    case PRIVATE:
      mb = ModuleFileVisibility();
      break;
    case ALIAS:
      mb = ModuleFileAlias();
      break;
    case CLASS:
      mb = ClsDecl();
      break;
    case VAR:
      mb = VarDecl();
      break;
    case FUN:
      mb = FunDecl();
      break;
    case DOT:
    case ELLIPSIS:
    case PLUS:
    case LPAREN:
    case LBRACKET:
    case LBRACE:
    case MINUS:
    case LRECBRACE:
    case DOLLARLPAREN:
    case PROBE:
    case WILD:
    case METHODLY1:
    case TABLE:
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
    case VALOF:
    case OBJECT:
    case THIS:
    case SPAWN:
    case IT:
    case NOT:
    case SUPER:
    case MAP:
    case ORD:
    case NULL:
    case TRUE:
    case FALSE:
    case VAL:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      mb = Bind(true);
      break;
    case JAVALY:
      mb = Javaly();
      break;
    case COMPONENT:
      mb = ComponentDecl();
      break;
    default:
      jj_la1[186] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return mb;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ModuleFileMember
  final public Bind Bind(boolean expRequired) throws ParseException {
    Cmd p, exp = null;
    Token start = null, end;
    TypeConstraints tcs = null;
    Pat pat;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAL:
      start = jj_consume_token(VAL);
      break;
    default:
      jj_la1[187] = jj_gen;
      ;
    }
    p = CompactExp();
    start = p.start;
    pat = pattern(p);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      exp = BiggishExp();
      break;
    default:
      jj_la1[188] = jj_gen;
      ;
    }
    end = jj_consume_token(SEMI);
    if (expRequired && exp==null) {
     {if (true) throw error(start, end, "Expression required in 'var' binding here.");}
   }
    {if (true) return new Bind(start, end, pat, exp);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Bind
  final public ModuleFileMemberStmt ModuleFileMemberStmt() throws ParseException {
    Token start, end;
    Token filename;
    start = jj_consume_token(MEMBER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING1:
      filename = jj_consume_token(STRING1);
      break;
    case STRING2:
      filename = jj_consume_token(STRING2);
      break;
    default:
      jj_la1[189] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    end = jj_consume_token(SEMI);
   {if (true) return new ModuleFileMemberStmt(start, end, filename.image.substring(1, filename.image.length()-1));}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ModuleFileMemberStmt
  final public ModuleFileImport ModuleFileImport() throws ParseException {
    ImportStmt is;
    is = ImportStmt();
   {if (true) return new ModuleFileImport(is.start, is.end, is);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ModuleFileImport
  final public ModuleFileAlias ModuleFileAlias() throws ParseException {
     Alias ali;
    ali = Alias();
    {if (true) return new ModuleFileAlias(ali.start, ali.end, ali);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ModuleFileAlias
  final public ModuleFileVisibility ModuleFileVisibility() throws ParseException {
     Token start, end;
     Visibility vis;
     Id id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      start = jj_consume_token(PUBLIC);
                     vis = Visibility.PUB;
      break;
    case PRIVATE:
      start = jj_consume_token(PRIVATE);
                     vis = Visibility.PRIV;
      break;
    default:
      jj_la1[190] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    id = Id();
    end = jj_consume_token(SEMI);
   {if (true) return new ModuleFileVisibility(start, end, vis, id);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ModuleFileVisibility

////////////////////////////////////////////////////////////////
// Table
////////////////////////////////////////////////////////////////
  final public TableMember TableMember() throws ParseException {
    TableMember ti;
    ti = TableFields();
   {if (true) return ti;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////TableMember
  final public IdWithOptInit IdWithOptInit(ColAccess colac) throws ParseException {
    Id id;
    Token assigner = null;
    TypeConstraints typeConstraints = null;
    Cmd init = null;
    Token end;
    id = Id();
   end = id.end;
    typeConstraints = TypeConstraints(end);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
    case GETS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        assigner = jj_consume_token(EQUALS);
        break;
      case GETS:
        assigner = jj_consume_token(GETS);
        break;
      default:
        jj_la1[191] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      init = CompactExp();
     requireEek(assigner, colac);
     end = init.end;
      break;
    default:
      jj_la1[192] = jj_gen;
      ;
    }
   {if (true) return new IdWithOptInit(id.start, end, id,  init, typeConstraints,colac);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////IdWithOptInit
  final public TableKey TableKey() throws ParseException {
    Id name;
    TypeConstraints tc;
    name = Id();
    tc = TypeConstraints(name.end);
   {if (true) return new TableKey(name.start, tc.end, name, tc);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////TableKey
  final public TableFields TableFields() throws ParseException {
    Token start = null, start0=null, end;
    ColAccess ack;
    TableFields tf;
    ColSpecial spe = ColSpecial.NORMAL;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAP:
      start0 = jj_consume_token(MAP);
                   spe = ColSpecial.MAP;
      break;
    default:
      jj_la1[193] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case VAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAL:
        start = jj_consume_token(VAL);
                       ack = ColAccess.VAL;
        break;
      case VAR:
        start = jj_consume_token(VAR);
                       ack = ColAccess.VAR;
        break;
      default:
        jj_la1[194] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tf = TableFieldsAfter(start0 == null ? start : start0, ack, spe);
       {if (true) return tf;}
      break;
    case ID1:
    case ID2:
      tf = TableFieldsAfter(start0, ColAccess.VAL, spe);
       {if (true) return tf;}
      break;
    default:
      jj_la1[195] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////TableField
  final public TableFields TableFieldsAfter(Token start, ColAccess ack, ColSpecial spe) throws ParseException {
    Token end;
    IdWithOptInit idi;
    List<IdWithOptInit> ids = null;
    idi = IdWithOptInit(ack);
   ids = list(idi);
   if (start == null) {
     start = idi.start;
     ack = ColAccess.VAL;
   }
    label_48:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[196] = jj_gen;
        break label_48;
      }
      jj_consume_token(COMMA);
      idi = IdWithOptInit(ack);
                                      ids.add(idi);
    }
    end = jj_consume_token(SEMI);
   {if (true) return new TableFields(start, end, ack, spe, ids);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////TableFieldsAfter

//tablewide// TablewideField /*&*/TablewideField():
//tablewide//   {
//tablewide//     Token start, end;
//tablewide//     ColAccess ack = null;
//tablewide//     Id id;     
//tablewide//     Cmd init;
//tablewide//   }
//tablewide// {
//tablewide//   start = <TABLE>
//tablewide//   (
//tablewide//     <VAR> {ack = ColAccess.VAR;} id = Id() (<GETS>)
//tablewide//   | <VAL> {ack = ColAccess.VAL;} id = Id() (<EQUALS>)  
//tablewide//   )        
//tablewide//   init = CompactExp()
//tablewide//   end = <SEMI>
//tablewide//   {return new TablewideField(start, end, ack, id, init);}
//tablewide// }//////////////////////TablewideField
//tablewide// 
  final public Table Table() throws ParseException {
    Token start, end;
    TableFields item;
    List<TableKey> keys = null;
    TableKey key;
    List<TableFields> items = null;
    start = jj_consume_token(TABLE);
    jj_consume_token(LPAREN);
    key = TableKey();
                       keys = list(key);
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[197] = jj_gen;
        break label_49;
      }
      jj_consume_token(COMMA);
      key = TableKey();
                         keys.add(key);
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAP:
    case VAR:
    case VAL:
    case ID1:
    case ID2:
      item = TableFields();
                            items = list(item);
      label_50:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAP:
        case VAR:
        case VAL:
        case ID1:
        case ID2:
          ;
          break;
        default:
          jj_la1[198] = jj_gen;
          break label_50;
        }
        item = TableFields();
                             items.add(item);
      }
      break;
    default:
      jj_la1[199] = jj_gen;
      ;
    }
   if (items == null) items = Collections.EMPTY_LIST;
    end = RbraceOf("table");
   {if (true) return new Table(start, end, keys, items);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Table
  final public Ord Ord() throws ParseException {
    Token start, end;
    TableFields fields;
    List<TableFields> fieldses = null;
    start = jj_consume_token(ORD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      fields = TableFields();
                                   fieldses = list(fields);
      label_51:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAP:
        case VAR:
        case VAL:
        case ID1:
        case ID2:
          ;
          break;
        default:
          jj_la1[200] = jj_gen;
          break label_51;
        }
        fields = TableFields();
                                     fieldses.add(fields);
      }
      end = jj_consume_token(RBRACE);
           {if (true) return new Ord(start, end, fieldses);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      end = jj_consume_token(RPAREN);
         {if (true) return fisher.syn.converters.OrdBuilder.simple(start, end);}
      break;
    default:
      jj_la1[201] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////Ord
  final public MapCtor MapCtor() throws ParseException {
    Token start, end;
    start = jj_consume_token(MAP);
    jj_consume_token(LPAREN);
    end = jj_consume_token(RPAREN);
     Cmd actualCode = DesugarMap.of(start, end);
   {if (true) return new MapCtor(start, end, actualCode);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////MapCtor

////////////////////////////////////////////////////////////////
// Spawns 
////////////////////////////////////////////////////////////////
  final public Cmd Spawn() throws ParseException {
    ProcMember pm;
    List<ProcMember> pms = Collections.EMPTY_LIST;
    Id name = null;
    Token start, end;
    List<Cmd> actuals = null;
    Token[] ender;
    start = jj_consume_token(SPAWN);
    if (jj_2_23(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID1:
      case ID2:
        name = Id();
        break;
      default:
        jj_la1[202] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case ELLIPSIS:
      case PLUS:
      case LPAREN:
      case LBRACKET:
      case LBRACE:
      case MINUS:
      case LRECBRACE:
      case DOLLARLPAREN:
      case PROBE:
      case WILD:
      case METHODLY1:
      case TABLE:
      case QUERYSWISS:
      case FIRST:
      case QUERYAFTER:
      case QUERYLIST:
      case COUNT:
      case EVERY:
      case SOME:
      case QUERYSORT:
      case QUERYTABLE:
      case QUERYGROUP:
      case VALOF:
      case CLASS:
      case OBJECT:
      case THIS:
      case SPAWN:
      case INITIALLY:
      case IT:
      case SYNC:
      case ASYNC:
      case BODY:
      case IMPORT:
      case NOT:
      case SUPER:
      case MAP:
      case ORD:
      case FUN:
      case NULL:
      case TRUE:
      case FALSE:
      case VAR:
      case VAL:
      case HEXINT:
      case OCTINT:
      case BININT:
      case ID1:
      case ID2:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        pm = ProcMember();
                          pms = list(pm);
        label_52:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
          case ELLIPSIS:
          case PLUS:
          case LPAREN:
          case LBRACKET:
          case LBRACE:
          case MINUS:
          case LRECBRACE:
          case DOLLARLPAREN:
          case PROBE:
          case WILD:
          case METHODLY1:
          case TABLE:
          case QUERYSWISS:
          case FIRST:
          case QUERYAFTER:
          case QUERYLIST:
          case COUNT:
          case EVERY:
          case SOME:
          case QUERYSORT:
          case QUERYTABLE:
          case QUERYGROUP:
          case VALOF:
          case CLASS:
          case OBJECT:
          case THIS:
          case SPAWN:
          case INITIALLY:
          case IT:
          case SYNC:
          case ASYNC:
          case BODY:
          case IMPORT:
          case NOT:
          case SUPER:
          case MAP:
          case ORD:
          case FUN:
          case NULL:
          case TRUE:
          case FALSE:
          case VAR:
          case VAL:
          case HEXINT:
          case OCTINT:
          case BININT:
          case ID1:
          case ID2:
          case INT:
          case FLOAT:
          case STRING2:
          case STRING1:
          case STRING4:
          case STRING3:
            ;
            break;
          default:
            jj_la1[203] = jj_gen;
            break label_52;
          }
          pm = ProcMember();
                            pms.add(pm);
        }
        break;
      default:
        jj_la1[204] = jj_gen;
        ;
      }
      end = RbraceOf2("spawn", name == null ? null : name.str());
      {if (true) return new Spawn(start, end, name, pms);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID1:
      case ID2:
        name = Id();
        jj_consume_token(LPAREN);
      ender = new Token[1];
        actuals = ActualsPlusRparen(ender);
      end = ender[0];
       if (name == null) {
          error(start, start, "Need a name or body of the component to spawn.");
       }
       end = name.end;
       {if (true) return new SpawnByComponentName(start, end, new VarExp(name.start, name.end, name), actuals);}
        break;
      default:
        jj_la1[205] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////Spawn
  final public ComponentDecl ComponentDecl() throws ParseException {
    Token start, end;
    Id name;
    Formals formals;
    List<ProcMember> pms = Collections.EMPTY_LIST;
    ProcMember pm;
    start = jj_consume_token(COMPONENT);
    name = Id();
    formals = Formals();
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case ELLIPSIS:
    case PLUS:
    case LPAREN:
    case LBRACKET:
    case LBRACE:
    case MINUS:
    case LRECBRACE:
    case DOLLARLPAREN:
    case PROBE:
    case WILD:
    case METHODLY1:
    case TABLE:
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
    case VALOF:
    case CLASS:
    case OBJECT:
    case THIS:
    case SPAWN:
    case INITIALLY:
    case IT:
    case SYNC:
    case ASYNC:
    case BODY:
    case IMPORT:
    case NOT:
    case SUPER:
    case MAP:
    case ORD:
    case FUN:
    case NULL:
    case TRUE:
    case FALSE:
    case VAR:
    case VAL:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      pm = ProcMember();
                       pms = list(pm);
      label_53:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
        case ELLIPSIS:
        case PLUS:
        case LPAREN:
        case LBRACKET:
        case LBRACE:
        case MINUS:
        case LRECBRACE:
        case DOLLARLPAREN:
        case PROBE:
        case WILD:
        case METHODLY1:
        case TABLE:
        case QUERYSWISS:
        case FIRST:
        case QUERYAFTER:
        case QUERYLIST:
        case COUNT:
        case EVERY:
        case SOME:
        case QUERYSORT:
        case QUERYTABLE:
        case QUERYGROUP:
        case VALOF:
        case CLASS:
        case OBJECT:
        case THIS:
        case SPAWN:
        case INITIALLY:
        case IT:
        case SYNC:
        case ASYNC:
        case BODY:
        case IMPORT:
        case NOT:
        case SUPER:
        case MAP:
        case ORD:
        case FUN:
        case NULL:
        case TRUE:
        case FALSE:
        case VAR:
        case VAL:
        case HEXINT:
        case OCTINT:
        case BININT:
        case ID1:
        case ID2:
        case INT:
        case FLOAT:
        case STRING2:
        case STRING1:
        case STRING4:
        case STRING3:
          ;
          break;
        default:
          jj_la1[206] = jj_gen;
          break label_53;
        }
        pm = ProcMember();
                         pms.add(pm);
      }
      break;
    default:
      jj_la1[207] = jj_gen;
      ;
    }
    end = RbraceOf2("spawn", name == null ? null : name.str());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      end = jj_consume_token(SEMI);
      break;
    default:
      jj_la1[208] = jj_gen;
      ;
    }
   {if (true) return new ComponentDecl(start, end, name, formals, pms,
     ComponentDeclDesugarer.of(start, end, name, formals, pms)
     );}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ComponentDecl
  final public ProcMember ProcMember() throws ParseException {
    ProcMember pm ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYNC:
      pm = SyncDecl();
      break;
    case ASYNC:
      pm = AsyncDecl();
      break;
    case FUN:
      pm = FunDecl();
      break;
    case DOT:
    case ELLIPSIS:
    case PLUS:
    case LPAREN:
    case LBRACKET:
    case LBRACE:
    case MINUS:
    case LRECBRACE:
    case DOLLARLPAREN:
    case PROBE:
    case WILD:
    case METHODLY1:
    case TABLE:
    case QUERYSWISS:
    case FIRST:
    case QUERYAFTER:
    case QUERYLIST:
    case COUNT:
    case EVERY:
    case SOME:
    case QUERYSORT:
    case QUERYTABLE:
    case QUERYGROUP:
    case VALOF:
    case OBJECT:
    case THIS:
    case SPAWN:
    case IT:
    case NOT:
    case SUPER:
    case MAP:
    case ORD:
    case NULL:
    case TRUE:
    case FALSE:
    case VAL:
    case HEXINT:
    case OCTINT:
    case BININT:
    case ID1:
    case ID2:
    case INT:
    case FLOAT:
    case STRING2:
    case STRING1:
    case STRING4:
    case STRING3:
      pm = Bind(false);
      break;
    case VAR:
      pm = VarDecl();
      break;
    case INITIALLY:
    case BODY:
      pm = ProcCode();
      break;
    case IMPORT:
      pm = ImportStmt();
      break;
    case CLASS:
      pm = ClsDecl();
      break;
    default:
      jj_la1[209] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return pm;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ProcMember
  final public ProcMember ProcCode() throws ParseException {
    Token start, end;
    Cmd code;
    char kind;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INITIALLY:
      start = jj_consume_token(INITIALLY);
                        kind = '1';
      break;
    case BODY:
      start = jj_consume_token(BODY);
                   kind = 'b';
      break;
    default:
      jj_la1[210] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    code = SeqOf(start.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[211] = jj_gen;
      ;
    }
    switch(kind) {
      case '1': {if (true) return new ProcInit(start, code.end, code);}
      case 'b': {if (true) return new ProcBody(start, code.end, code);}
      default: {if (true) throw error(start, code.end, "Internal error -- what is kind=" + kind);}
      }
    throw new Error("Missing return statement in function");
  }

 //////////////////////ProcCode
  final public SyncDecl SyncDecl() throws ParseException {
    Token start;
    Id id;
    FunBody funbody;
    start = jj_consume_token(SYNC);
    funbody = FunBody("sync", true);
    {if (true) return new SyncDecl(start, funbody.end, funbody.id(), funbody);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////RpcDecl
  final public AsyncDecl AsyncDecl() throws ParseException {
    Token start;
    Id id;
    FunBody funbody;
    start = jj_consume_token(ASYNC);
    funbody = FunBody("async", true);
    {if (true) return new AsyncDecl(start, funbody.end, funbody.id(), funbody);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////SignalDecl
  final public Recv Recv() throws ParseException {
    Token start, end = null;
    Cmd subject;
    List<Case> cases = null;
    Cmd timeoutLen = null, timeoutCmd = null;
    start = jj_consume_token(RECV);
    jj_consume_token(LBRACE);
    cases = Cases();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMEOUT:
      jj_consume_token(TIMEOUT);
      jj_consume_token(LPAREN);
      timeoutLen = BiggishExp();
      jj_consume_token(RPAREN);
      timeoutCmd = ExpOrBlockOf("timeout");
      break;
    default:
      jj_la1[212] = jj_gen;
      ;
    }
    end = RbraceOf(start.image);
    label_54:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        ;
        break;
      default:
        jj_la1[213] = jj_gen;
        break label_54;
      }
      jj_consume_token(SEMI);
    }
   {if (true) return new Recv(start, end,  cases, timeoutLen, timeoutCmd);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Recv




////////////////////////////////////////////////////////////////
// Java
////////////////////////////////////////////////////////////////
  final public ModuleFileMember Javaly() throws ParseException {
    Token start, end;
    Id name;
    List<Id> formals = null;
    QualName qualname;
    JavalyClassDecl jcl;
    start = jj_consume_token(JAVALY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUN:
      jj_consume_token(FUN);
      name = Id();
      jj_consume_token(LPAREN);
      formals = Ids();
      jj_consume_token(RPAREN);
      jj_consume_token(EQUALS);
      qualname = QualName(2);
      end = jj_consume_token(SEMI);
     {if (true) return new JavalyFun(start, end, name, formals, qualname);}
      break;
    case CLASS:
      jcl = JavalyClassDecl(start);
     {if (true) return jcl;}
      break;
    default:
      jj_la1[214] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////Javaly
  final public JavalyMethodDecl JavalyMethodDecl() throws ParseException {
    Token start, end;
    Id name;
    List<Id> formals = null;
    Id impl = null;
    start = jj_consume_token(METH);
    name = Id();
    jj_consume_token(LPAREN);
    formals = Ids();
    jj_consume_token(RPAREN);
    jj_consume_token(EQUALS);
    impl = Id();
    end = jj_consume_token(SEMI);
   {if (true) return new JavalyMethodDecl(start, end, name, formals, impl);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////JavalyMethodDecl
  final public JavalyNewDecl JavalyNewDecl() throws ParseException {
    Token start, end;
    Id name;
    List<Id> formals = null;
    start = jj_consume_token(NEW);
    name = Id();
    jj_consume_token(LPAREN);
    formals = Ids();
    jj_consume_token(RPAREN);
    end = jj_consume_token(SEMI);
   {if (true) return new JavalyNewDecl(start, end, name, formals);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////JavalyNewDecl
  final public JavalyClassDecl JavalyClassDecl(Token start) throws ParseException {
     Token end;
     Id name;
     QualName impl;
     JavalyMethodDecl meth;
     List<JavalyMethodDecl> meths = list();
     JavalyNewDecl nhw;
     List<JavalyNewDecl> nhws = list();
     List<Id> formals = Collections.EMPTY_LIST;
    jj_consume_token(CLASS);
    name = Id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      formals = Ids();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[215] = jj_gen;
      ;
    }
    jj_consume_token(EQUALS);
    impl = QualName(1);
    jj_consume_token(LBRACE);
    label_55:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case METH:
      case NEW:
        ;
        break;
      default:
        jj_la1[216] = jj_gen;
        break label_55;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case METH:
        meth = JavalyMethodDecl();
                               meths.add(meth);
        break;
      case NEW:
        nhw = JavalyNewDecl();
                               nhws.add(nhw);
        break;
      default:
        jj_la1[217] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    end = RbraceOf2("class", name.str());
   {if (true) return new JavalyClassDecl(start, end, name, impl, meths, nhws, formals);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////JavalyClassDecl



////////////////////////////////////////////////////////////////
// Reading constants into Thorn objects.
////////////////////////////////////////////////////////////////
  final public Thing ReadThing() throws ParseException, FisherException {
    Token a;
    List<Thing> L = null;
    Thing t;
    RecordTh r = null;
    Id id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      a = jj_consume_token(INT);
             {if (true) return IntTh.of(Long.parseLong(a.image));}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      a = jj_consume_token(INT);
                     {if (true) return IntTh.of(-Long.parseLong(a.image));}
      break;
    case FLOAT:
      a = jj_consume_token(FLOAT);
               {if (true) return FloatTh.of(Double.parseDouble(a.image));}
      break;
    case TRUE:
      jj_consume_token(TRUE);
          {if (true) return BoolTh.True;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
           {if (true) return BoolTh.False;}
      break;
    case NULL:
      jj_consume_token(NULL);
          {if (true) return null;}
      break;
    case STRING1:
      a = jj_consume_token(STRING1);
                 {if (true) return QuoteStyle.Q1.deBackslash(a);}
      break;
    case STRING2:
      a = jj_consume_token(STRING2);
                 {if (true) return QuoteStyle.Q2.deBackslash(a);}
      break;
    case STRING3:
      a = jj_consume_token(STRING3);
                 {if (true) return QuoteStyle.QQQ1.deBackslash(a);}
      break;
    case STRING4:
      a = jj_consume_token(STRING4);
                 {if (true) return QuoteStyle.QQQ2.deBackslash(a);}
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
   L = list();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case LBRACE:
      case MINUS:
      case NULL:
      case TRUE:
      case FALSE:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        t = ReadThing();
                     L.add(t);
        label_56:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[218] = jj_gen;
            break label_56;
          }
          jj_consume_token(COMMA);
          t = ReadThing();
                       L.add(t);
        }
        break;
      default:
        jj_la1[219] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
   {if (true) return ListTh.fromJavaList(L);}
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
   r = RecordTh.unfinished();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID1:
      case ID2:
        ReadThing_RecordField(r);
        label_57:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[220] = jj_gen;
            break label_57;
          }
          jj_consume_token(COMMA);
          ReadThing_RecordField(r);
        }
        break;
      default:
        jj_la1[221] = jj_gen;
        ;
      }
   r.finish();
   {if (true) return r;}
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[222] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////ReadThing
  final public void ReadThing_RecordField(RecordTh r) throws ParseException, FisherException {
    Id id; Thing th;
    id = Id();
    jj_consume_token(COLON);
    th = ReadThing();
   r.setField(id.str(), th);
  }

 //////////////////////ReadThing_RecordField

////////////////////////////////////////////////////////////////
// Testing Interface
////////////////////////////////////////////////////////////////
  final public Cmd TestExp(FisherSource source) throws ParseException {
    Cmd c;
    c = CommandlikeExp();
    jj_consume_token(0);
   c.setSourceOnFamily(source);
   {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////TestExp   
  final public Cmd TestStmt(FisherSource source) throws ParseException {
    Cmd c;
    c = Stmt(null,null);
    jj_consume_token(0);
   c.setSourceOnFamily(source);
   {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////TestStmt   
  final public Pat TestPat(FisherSource source) throws ParseException {
    Pat c;
    c = Pat();
    jj_consume_token(0);
   c.setSourceOnFamily(source);
   {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////TestPat   
  final public ClsDecl TestClsDecl(FisherSource source) throws ParseException {
    ClsDecl c;
    c = ClsDecl();
    jj_consume_token(0);
   c.setSourceOnFamily(source);
   {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////TestClsDecl
  final public Module TestModule(FisherSource source) throws ParseException {
     Module mf;
    mf = Module();
    jj_consume_token(0);
   mf.setSourceOnFamily(source);
   {if (true) return mf;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////TestModuleFile
  final public CmdsInAList TestCmds(FisherSource source) throws ParseException {
     Cmd mf = null;
     Token start, end;
     List<Cmd> L = new ArrayList<Cmd>();
    label_58:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case ELLIPSIS:
      case PLUS:
      case LPAREN:
      case LBRACKET:
      case LBRACE:
      case MINUS:
      case LRECBRACE:
      case DOLLARLPAREN:
      case PROBE:
      case WILD:
      case METHODLY1:
      case TABLE:
      case QUERYSWISS:
      case FIRST:
      case QIF:
      case QUERYAFTER:
      case QUERYLIST:
      case COUNT:
      case EVERY:
      case SOME:
      case QUERYSORT:
      case QUERYTABLE:
      case QUERYGROUP:
      case VALOF:
      case COMPONENT:
      case CLASS:
      case OBJECT:
      case THIS:
      case NEW:
      case SPAWN:
      case IT:
      case SERVE:
      case ALIAS:
      case IMPORT:
      case NOT:
      case SUPER:
      case MAP:
      case ORD:
      case BREAK:
      case CONTINUE:
      case FUN:
      case FN:
      case THROW:
      case TRY:
      case NULL:
      case TRUE:
      case FALSE:
      case VAR:
      case MATCH:
      case IF:
      case UNLESS:
      case FOR:
      case WHILE:
      case SIGNATURE:
      case DO:
      case UNTIL:
      case RETURN:
      case RECV:
      case HEXINT:
      case OCTINT:
      case BININT:
      case ID1:
      case ID2:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        ;
        break;
      default:
        jj_la1[223] = jj_gen;
        break label_58;
      }
      mf = Stmt(null,null);
     mf.setSourceOnFamily(source);
     L.add(mf);
    }
    end = jj_consume_token(0);
   {if (true) return new CmdsInAList(
     L.isEmpty() ? end : L.get(0).start,
     end,
     L
     );}
    throw new Error("Missing return statement in function");
  }

 //////////////////////TestCmd
  final public Spawn SpawnFile(FisherSource source) throws ParseException {
    Cmd cmd; Spawn sp;
    cmd = Spawn();
    label_59:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        ;
        break;
      default:
        jj_la1[224] = jj_gen;
        break label_59;
      }
      jj_consume_token(SEMI);
    }
    jj_consume_token(0);
   if (cmd instanceof Spawn) {
    sp = (Spawn) cmd;
    sp.setSourceOnFamily(source);
    {if (true) return sp;}}
   else {

   }
    throw new Error("Missing return statement in function");
  }

 //////////////////////SpawnFile
  final public Syntax SpawnOrComponentFile(FisherSource source) throws ParseException {
    Cmd cmd; Spawn sp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPAWN:
      cmd = Spawn();
      label_60:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMI:
          ;
          break;
        default:
          jj_la1[225] = jj_gen;
          break label_60;
        }
        jj_consume_token(SEMI);
      }
      break;
    case COMPONENT:
      cmd = ComponentDecl();
      break;
    default:
      jj_la1[226] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(0);
   cmd.setSourceOnFamily(source);
   {if (true) return cmd;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////SpawnFile
  final public Seq SeqPossiblyOutsideBraces(FisherSource source) throws ParseException {
    Seq s;
    CmdsInAList cial;
    cial = TestCmds(source);
    s = new Seq(cial.start, cial.end, cial.cmds);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////SeqPossiblyOutsideBraces
  final public ModulesInAList TestModules(FisherSource source) throws ParseException {
     Module mf = null;
     Token start, end;
     List<Module> L = new ArrayList<Module>();
    label_61:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULE:
      case VAL:
        ;
        break;
      default:
        jj_la1[227] = jj_gen;
        break label_61;
      }
      mf = Module();
     mf.setSourceOnFamily(source);
     L.add(mf);
    }
    end = jj_consume_token(0);
   {if (true) return new ModulesInAList(
     L.isEmpty() ? end : L.get(0).start,
     end,
     L
     );}
    throw new Error("Missing return statement in function");
  }

 //////////////////////TestModuleFile
  final public SyntaxInAList ModulesAndCmds(FisherSource source) throws ParseException {
    Syntax syn;
    Syntax firstsyn = null, lastsyn = null;
    List<Syntax> L = new ArrayList<Syntax>();
    Token end;
    label_62:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case ELLIPSIS:
      case PLUS:
      case LPAREN:
      case LBRACKET:
      case LBRACE:
      case MINUS:
      case LRECBRACE:
      case DOLLARLPAREN:
      case PROBE:
      case WILD:
      case METHODLY1:
      case TABLE:
      case QUERYSWISS:
      case FIRST:
      case QIF:
      case QUERYAFTER:
      case QUERYLIST:
      case COUNT:
      case EVERY:
      case SOME:
      case QUERYSORT:
      case QUERYTABLE:
      case QUERYGROUP:
      case VALOF:
      case COMPONENT:
      case CLASS:
      case OBJECT:
      case THIS:
      case NEW:
      case SPAWN:
      case IT:
      case SERVE:
      case ALIAS:
      case IMPORT:
      case NOT:
      case SUPER:
      case MAP:
      case ORD:
      case MODULE:
      case BREAK:
      case CONTINUE:
      case FUN:
      case FN:
      case THROW:
      case TRY:
      case NULL:
      case TRUE:
      case FALSE:
      case VAR:
      case VAL:
      case MATCH:
      case IF:
      case UNLESS:
      case FOR:
      case WHILE:
      case SIGNATURE:
      case DO:
      case UNTIL:
      case RETURN:
      case RECV:
      case HEXINT:
      case OCTINT:
      case BININT:
      case ID1:
      case ID2:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        ;
        break;
      default:
        jj_la1[228] = jj_gen;
        break label_62;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULE:
      case VAL:
        syn = Module();
        break;
      case DOT:
      case ELLIPSIS:
      case PLUS:
      case LPAREN:
      case LBRACKET:
      case LBRACE:
      case MINUS:
      case LRECBRACE:
      case DOLLARLPAREN:
      case PROBE:
      case WILD:
      case METHODLY1:
      case TABLE:
      case QUERYSWISS:
      case FIRST:
      case QIF:
      case QUERYAFTER:
      case QUERYLIST:
      case COUNT:
      case EVERY:
      case SOME:
      case QUERYSORT:
      case QUERYTABLE:
      case QUERYGROUP:
      case VALOF:
      case COMPONENT:
      case CLASS:
      case OBJECT:
      case THIS:
      case NEW:
      case SPAWN:
      case IT:
      case SERVE:
      case ALIAS:
      case IMPORT:
      case NOT:
      case SUPER:
      case MAP:
      case ORD:
      case BREAK:
      case CONTINUE:
      case FUN:
      case FN:
      case THROW:
      case TRY:
      case NULL:
      case TRUE:
      case FALSE:
      case VAR:
      case MATCH:
      case IF:
      case UNLESS:
      case FOR:
      case WHILE:
      case SIGNATURE:
      case DO:
      case UNTIL:
      case RETURN:
      case RECV:
      case HEXINT:
      case OCTINT:
      case BININT:
      case ID1:
      case ID2:
      case INT:
      case FLOAT:
      case STRING2:
      case STRING1:
      case STRING4:
      case STRING3:
        syn = Stmt(null,null);
        break;
      default:
        jj_la1[229] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
   lastsyn = syn;
   if (firstsyn == null) firstsyn = syn;
   syn.setSourceOnFamily(source);
   L.add(syn);
    }
    end = jj_consume_token(0);
 {if (true) return new SyntaxInAList(firstsyn.start, end, L);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////ModulesAndCmds
  final public Id TestId(FisherSource source) throws ParseException {
     Id id;
    id = Id();
    jj_consume_token(0);
   id.setSourceOnFamily(source);
   {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

 //////////////////////TestId
  final public TypeConstraint TypeConstraint() throws ParseException {
     Id id;
    id = Id();
    {if (true) return new TypeConstraint(id.start, id.end, id);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////TypeConstraint
  final public TypeConstraints TypeConstraints(Token near) throws ParseException {
    TypeConstraint tc;
    Token start=null, end=null;
    List<TypeConstraint> tcs = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      start = jj_consume_token(COLON);
     tcs = list();
      tc = TypeConstraint();
                            tcs.add(tc); end = tc.end;
      label_63:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AMPERSAND:
          ;
          break;
        default:
          jj_la1[230] = jj_gen;
          break label_63;
        }
        jj_consume_token(AMPERSAND);
        tc = TypeConstraint();
                              tcs.add(tc); end = tc.end;
      }
      break;
    default:
      jj_la1[231] = jj_gen;
      ;
    }
   if (tcs == null) {
     {if (true) return new TypeConstraints(near, near, Collections.EMPTY_LIST);}
     }
   else {
     {if (true) return new TypeConstraints(start, end, tcs);}
     }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_3R_220() {
    if (jj_scan_token(FDIVAB)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_430() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(GETS)) return true;
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_472()) {
    jj_scanpos = xsp;
    if (jj_3R_473()) return true;
    }
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_scan_token(TIMESAB)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(MINUSAB)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_408() {
    if (jj_3R_437()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    xsp = jj_scanpos;
    if (jj_3R_438()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_439()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_440()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_441()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_442()) {
    jj_scanpos = xsp;
    if (jj_3R_443()) return true;
    }
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_scan_token(PLUSAB)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_398() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_320()) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(CONSAB)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_501() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_360() {
    if (jj_3R_320()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_398()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_429() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(139)) jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_287() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_214() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_287()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GETS)) return true;
    if (jj_3R_96()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_501()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_3R_360()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_96()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_359() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  final private boolean jj_3R_465() {
    if (jj_scan_token(BAR)) return true;
    if (jj_3R_408()) return true;
    return false;
  }

  final private boolean jj_3R_428() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_358() {
    if (jj_scan_token(VAL)) return true;
    return false;
  }

  final private boolean jj_3R_311() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_358()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) return true;
    }
    if (jj_3R_360()) return true;
    return false;
  }

  final private boolean jj_3R_372() {
    if (jj_3R_408()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_465()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_310() {
    if (jj_scan_token(MAP)) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_310()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_311()) {
    jj_scanpos = xsp;
    if (jj_3R_312()) return true;
    }
    return false;
  }

  final private boolean jj_3R_469() {
    if (jj_scan_token(ITER_INQ)) return true;
    return false;
  }

  final private boolean jj_3R_468() {
    if (jj_scan_token(ITER_DEM)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(FUN)) return true;
    if (jj_3R_372()) return true;
    return false;
  }

  final private boolean jj_3R_426() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_64()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_468()) {
    jj_scanpos = xsp;
    if (jj_3R_469()) return true;
    }
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_3R_80()) return true;
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(UNTIL)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_403() {
    if (jj_3R_430()) return true;
    return false;
  }

  final private boolean jj_3R_402() {
    if (jj_3R_429()) return true;
    return false;
  }

  final private boolean jj_3R_401() {
    if (jj_3R_428()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(UNTIL)) return true;
    return false;
  }

  final private boolean jj_3R_447() {
    if (jj_scan_token(ITER_INQ)) return true;
    return false;
  }

  final private boolean jj_3R_400() {
    if (jj_3R_427()) return true;
    return false;
  }

  final private boolean jj_3R_446() {
    if (jj_scan_token(ITER_DEM)) return true;
    return false;
  }

  final private boolean jj_3R_399() {
    if (jj_3R_426()) return true;
    return false;
  }

  final private boolean jj_3R_361() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_399()) {
    jj_scanpos = xsp;
    if (jj_3R_400()) {
    jj_scanpos = xsp;
    if (jj_3R_401()) {
    jj_scanpos = xsp;
    if (jj_3R_402()) {
    jj_scanpos = xsp;
    if (jj_3R_403()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_464() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_365() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_80()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) jj_scanpos = xsp;
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    xsp = jj_scanpos;
    if (jj_3R_446()) {
    jj_scanpos = xsp;
    if (jj_3R_447()) return true;
    }
    if (jj_3R_70()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_424() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_464()) return true;
    }
    return false;
  }

  final private boolean jj_3R_362() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_361()) return true;
    return false;
  }

  final private boolean jj_3R_320() {
    if (jj_3R_80()) return true;
    if (jj_3R_260()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_365()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_316() {
    if (jj_3R_361()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_362()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_484() {
    if (jj_3R_254()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_273()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_272()) return true;
    return false;
  }

  final private boolean jj_3R_463() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_484()) return true;
    }
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_3R_271()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_3R_270()) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_3R_269()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_3R_268()) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_267()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_3R_266()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_124()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(28)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_497()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_80()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    return false;
  }

  final private boolean jj_3R_378() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_305()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_333() {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_378()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_132()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_445() {
    if (jj_3R_80()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_413() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_445()) jj_scanpos = xsp;
    if (jj_scan_token(SIGNATURE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_497()) return true;
    return false;
  }

  final private boolean jj_3R_381() {
    if (jj_3R_413()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_67()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_336() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_381()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_190() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) return true;
    }
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_305()) return true;
    return false;
  }

  final private boolean jj_3R_379() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(SUPER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_500() {
    if (jj_3R_213()) return true;
    return false;
  }

  final private boolean jj_3R_334() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_379()) jj_scanpos = xsp;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_66()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_497() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_500()) return true;
    }
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_425() {
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_3R_213()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(139)) jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    xsp = jj_scanpos;
    if (jj_3R_425()) jj_scanpos = xsp;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_357() {
    if (jj_scan_token(AMPERSAND)) return true;
    if (jj_3R_356()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) return true;
    }
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_309() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_356()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_357()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_286() {
    if (jj_3R_337()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_309()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_285() {
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    if (jj_3R_336()) return true;
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_3R_335()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_282() {
    if (jj_3R_334()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_3R_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_390() {
    if (jj_scan_token(UNLESS)) return true;
    return false;
  }

  final private boolean jj_3R_281() {
    if (jj_3R_333()) return true;
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_279() {
    if (jj_3R_332()) return true;
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_3R_331()) return true;
    return false;
  }

  final private boolean jj_3R_356() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_3R_330()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_276() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_3R_253()) return true;
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_3R_179()) return true;
    return false;
  }

  final private boolean jj_3R_303() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) {
    jj_scanpos = xsp;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) {
    jj_scanpos = xsp;
    if (jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_303()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_304()) return true;
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_3R_349()) return true;
    return false;
  }

  final private boolean jj_3R_301() {
    if (jj_3R_348()) return true;
    return false;
  }

  final private boolean jj_3R_300() {
    if (jj_3R_347()) return true;
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_3R_346()) return true;
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_3R_345()) return true;
    return false;
  }

  final private boolean jj_3R_297() {
    if (jj_3R_344()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) {
    jj_scanpos = xsp;
    if (jj_3R_299()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) {
    jj_scanpos = xsp;
    if (jj_3R_301()) {
    jj_scanpos = xsp;
    if (jj_3R_302()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_80()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_391() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_291() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_389() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_291()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_344() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_389()) {
    jj_scanpos = xsp;
    if (jj_3R_390()) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_124()) return true;
    xsp = jj_scanpos;
    if (jj_3R_391()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(LRECBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) jj_scanpos = xsp;
    if (jj_scan_token(RRECBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_377() {
    if (jj_scan_token(GETS)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    return false;
  }

  final private boolean jj_3R_330() {
    if (jj_scan_token(ALIAS)) return true;
    if (jj_3R_305()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_305()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_80()) return true;
    if (jj_3R_260()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_377()) jj_scanpos = xsp;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_466() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_415()) return true;
    return false;
  }

  final private boolean jj_3R_374() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_415()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_466()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_scan_token(PROBECOUNT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_265()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_412() {
    if (jj_scan_token(TIMEOUT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_3R_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_264()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(PURE)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(DOTSTAR)) return true;
    return false;
  }

  final private boolean jj_3R_411() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_392()) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_373() {
    if (jj_scan_token(OWN)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_80()) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  final private boolean jj_3R_410() {
    if (jj_scan_token(AFTER)) return true;
    if (jj_3R_444()) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(PROBE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_202()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(IMPORT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_373()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    if (jj_3R_305()) return true;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_374()) jj_scanpos = xsp;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_409() {
    if (jj_scan_token(BEFORE)) return true;
    if (jj_3R_444()) return true;
    return false;
  }

  final private boolean jj_3R_380() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_409()) {
    jj_scanpos = xsp;
    if (jj_3R_410()) {
    jj_scanpos = xsp;
    if (jj_3R_411()) {
    jj_scanpos = xsp;
    if (jj_3R_412()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_496() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_335() {
    if (jj_scan_token(SERVE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_380()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) return true;
    }
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_350() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_503() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_305() {
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_350()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(BININT)) return true;
    return false;
  }

  final private boolean jj_3R_475() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_80()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_503()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(OCTINT)) return true;
    return false;
  }

  final private boolean jj_3R_444() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_475()) jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_scan_token(HEXINT)) return true;
    return false;
  }

  final private boolean jj_3R_343() {
    if (jj_3R_254()) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) return true;
    }
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(STRING4)) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_scan_token(STRING3)) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_scan_token(STRING2)) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_scan_token(STRING1)) return true;
    return false;
  }

  final private boolean jj_3R_376() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_332() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_376()) jj_scanpos = xsp;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_415() {
    if (jj_3R_80()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_305()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) return true;
    }
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_296() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_375() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_304() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) return true;
    }
    return false;
  }

  final private boolean jj_3R_331() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_375()) jj_scanpos = xsp;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_295() {
    if (jj_scan_token(EQUALS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_343()) return true;
    }
    return false;
  }

  final private boolean jj_3R_384() {
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    xsp = jj_scanpos;
    if (jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) return true;
    }
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_383() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_416()) return true;
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(28)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(VALOF)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_194()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_scan_token(BAR)) return true;
    if (jj_3R_235()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_3R_235()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_236()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_80()) return true;
    if (jj_3R_382()) return true;
    if (jj_3R_191()) return true;
    if (jj_3R_192()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_383()) {
    jj_scanpos = xsp;
    if (jj_3R_384()) return true;
    }
    return false;
  }

  final private boolean jj_3R_437() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(METHODLY1)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(DOLLARLPAREN)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_498() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_477()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(ID2)) return true;
    return false;
  }

  final private boolean jj_3R_448() {
    if (jj_3R_477()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_498()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(ID1)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  final private boolean jj_3R_414() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_448()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(ELLIPSIS)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_382() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_414()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_162()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_161()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_158()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_157()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_156()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_154()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_486() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_152()) return true;
    return false;
  }

  final private boolean jj_3R_477() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_486()) jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(WILD)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_3R_254()) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_3R_253()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(IT)) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(RPARENQU)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(OBJECT)) return true;
    if (jj_3R_191()) return true;
    if (jj_3R_192()) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_193()) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_72()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    return false;
  }

  final private boolean jj_3R_436() {
    if (jj_scan_token(NONE)) return true;
    return false;
  }

  final private boolean jj_3R_435() {
    if (jj_scan_token(MOREL)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    return false;
  }

  final private boolean jj_3R_405() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_435()) {
    jj_scanpos = xsp;
    if (jj_3R_436()) return true;
    }
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_186()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_185()) return true;
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_3R_308()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    return false;
  }

  final private boolean jj_3R_193() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_259()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_407() {
    if (jj_3R_405()) return true;
    return false;
  }

  final private boolean jj_3R_371() {
    if (jj_3R_405()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_407()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_307() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_306()) return true;
    return false;
  }

  final private boolean jj_3R_328() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_371()) jj_scanpos = xsp;
    if (jj_scan_token(BAR)) return true;
    if (jj_3R_316()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_231()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_306()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_307()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_406() {
    if (jj_3R_405()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_370() {
    if (jj_3R_405()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_406()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_327() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_370()) jj_scanpos = xsp;
    if (jj_scan_token(BAR)) return true;
    if (jj_3R_316()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_273() {
    if (jj_scan_token(QUERYSORT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_327()) {
    jj_scanpos = xsp;
    if (jj_3R_328()) return true;
    }
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_351() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_3R_305()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_351()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_434() {
    if (jj_scan_token(COUNT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_433() {
    if (jj_scan_token(QUERYREV)) return true;
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_449() {
    if (jj_3R_478()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_133()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_416() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_449()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_432() {
    if (jj_scan_token(QUERYLISTWORD)) return true;
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_474() {
    if (jj_scan_token(QUERYAFTER)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_431() {
    if (jj_scan_token(FIRST)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(NONE)) return true;
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_474()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_404() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_431()) {
    jj_scanpos = xsp;
    if (jj_3R_432()) {
    jj_scanpos = xsp;
    if (jj_3R_433()) {
    jj_scanpos = xsp;
    if (jj_3R_434()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_495() {
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_369() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(GETS)) return true;
    if (jj_3R_404()) return true;
    return false;
  }

  final private boolean jj_3R_397() {
    if (jj_scan_token(METH)) return true;
    if (jj_3R_372()) return true;
    return false;
  }

  final private boolean jj_3R_480() {
    if (jj_3R_495()) return true;
    return false;
  }

  final private boolean jj_3R_368() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(139)) jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_404()) return true;
    return false;
  }

  final private boolean jj_3R_494() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_367() {
    if (jj_scan_token(MAP)) return true;
    return false;
  }

  final private boolean jj_3R_493() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_325() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_367()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_368()) {
    jj_scanpos = xsp;
    if (jj_3R_369()) return true;
    }
    return false;
  }

  final private boolean jj_3R_492() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_479() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_492()) {
    jj_scanpos = xsp;
    if (jj_3R_493()) {
    jj_scanpos = xsp;
    if (jj_3R_494()) return true;
    }
    }
    if (jj_3R_450()) return true;
    return false;
  }

  final private boolean jj_3R_450() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_479()) {
    jj_scanpos = xsp;
    if (jj_3R_480()) return true;
    }
    return false;
  }

  final private boolean jj_3R_482() {
    if (jj_3R_496()) return true;
    return false;
  }

  final private boolean jj_3R_481() {
    if (jj_3R_305()) return true;
    return false;
  }

  final private boolean jj_3R_323() {
    if (jj_3R_80()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_451() {
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_481()) {
    jj_scanpos = xsp;
    if (jj_3R_482()) return true;
    }
    return false;
  }

  final private boolean jj_3R_393() {
    if (jj_scan_token(TIMEOUT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_424()) return true;
    return false;
  }

  final private boolean jj_3R_417() {
    if (jj_3R_450()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_451()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_346() {
    if (jj_scan_token(RECV)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_392()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_393()) jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(28)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_326() {
    if (jj_3R_325()) return true;
    return false;
  }

  final private boolean jj_3R_457() {
    if (jj_scan_token(170)) return true;
    if (jj_3R_417()) return true;
    if (jj_scan_token(171)) return true;
    if (jj_3R_417()) return true;
    return false;
  }

  final private boolean jj_3R_324() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

  final private boolean jj_3R_456() {
    if (jj_scan_token(168)) return true;
    if (jj_3R_417()) return true;
    if (jj_scan_token(169)) return true;
    if (jj_3R_417()) return true;
    return false;
  }

  final private boolean jj_3R_505() {
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_455() {
    if (jj_scan_token(METHODLY2)) return true;
    if (jj_3R_417()) return true;
    return false;
  }

  final private boolean jj_3R_454() {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_417()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(ASYNC)) return true;
    if (jj_3R_372()) return true;
    return false;
  }

  final private boolean jj_3R_453() {
    if (jj_scan_token(IDIV)) return true;
    if (jj_3R_417()) return true;
    return false;
  }

  final private boolean jj_3R_452() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_417()) return true;
    return false;
  }

  final private boolean jj_3R_419() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_452()) {
    jj_scanpos = xsp;
    if (jj_3R_453()) {
    jj_scanpos = xsp;
    if (jj_3R_454()) {
    jj_scanpos = xsp;
    if (jj_3R_455()) {
    jj_scanpos = xsp;
    if (jj_3R_456()) {
    jj_scanpos = xsp;
    if (jj_3R_457()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_272() {
    if (jj_scan_token(QUERYGROUP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_323()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_324()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_325()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_326()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(BAR)) return true;
    if (jj_3R_316()) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_418() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_417()) return true;
    return false;
  }

  final private boolean jj_3R_504() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_385() {
    if (jj_3R_417()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_418()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_419()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(SYNC)) return true;
    if (jj_3R_372()) return true;
    return false;
  }

  final private boolean jj_3R_499() {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_504()) jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    if (jj_3R_191()) return true;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_505()) return true;
    }
    return false;
  }

  final private boolean jj_3R_366() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_421() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_385()) return true;
    return false;
  }

  final private boolean jj_3R_322() {
    if (jj_3R_261()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_366()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_420() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_385()) return true;
    return false;
  }

  final private boolean jj_3R_386() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_420()) {
    jj_scanpos = xsp;
    if (jj_3R_421()) return true;
    }
    return false;
  }

  final private boolean jj_3R_338() {
    if (jj_3R_385()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_386()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_321() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_320()) return true;
    return false;
  }

  final private boolean jj_3R_355() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3R_354() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_353() {
    if (jj_3R_180()) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_scan_token(BODY)) return true;
    return false;
  }

  final private boolean jj_3R_388() {
    if (jj_scan_token(DOTDOTLT)) return true;
    if (jj_3R_338()) return true;
    return false;
  }

  final private boolean jj_3R_352() {
    if (jj_3R_397()) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_scan_token(INITIALLY)) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    }
    if (jj_3R_79()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_387() {
    if (jj_scan_token(DOTDOT)) return true;
    if (jj_3R_338()) return true;
    return false;
  }

  final private boolean jj_3R_339() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_387()) {
    jj_scanpos = xsp;
    if (jj_3R_388()) return true;
    }
    return false;
  }

  final private boolean jj_3R_308() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_352()) {
    jj_scanpos = xsp;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3R_355()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_3R_338()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_339()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_271() {
    if (jj_scan_token(QUERYTABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_320()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_321()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_322()) jj_scanpos = xsp;
    if (jj_scan_token(BAR)) return true;
    if (jj_3R_316()) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_491() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3R_490() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_489() {
    if (jj_3R_499()) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3R_488() {
    if (jj_3R_180()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3R_487() {
    if (jj_3R_397()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_182()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_3R_288()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_3R_180()) return true;
    return false;
  }

  final private boolean jj_3R_478() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_487()) {
    jj_scanpos = xsp;
    if (jj_3R_488()) {
    jj_scanpos = xsp;
    if (jj_3R_489()) {
    jj_scanpos = xsp;
    if (jj_3R_490()) {
    jj_scanpos = xsp;
    if (jj_3R_491()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_3R_179()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_178()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_3R_177()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_319() {
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_223()) return true;
    return false;
  }

  final private boolean jj_3R_270() {
    if (jj_scan_token(QUERYLIST)) return true;
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_319()) jj_scanpos = xsp;
    if (jj_scan_token(BAR)) return true;
    if (jj_3R_316()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_485() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_467() {
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_485()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_3R_223()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_224()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_337() {
    if (jj_scan_token(COMPONENT)) return true;
    if (jj_3R_80()) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_467()) jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_395() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_254()) return true;
    return false;
  }

  final private boolean jj_3R_342() {
    if (jj_scan_token(DELFROM)) return true;
    return false;
  }

  final private boolean jj_3R_341() {
    if (jj_scan_token(ADDTO)) return true;
    return false;
  }

  final private boolean jj_3R_340() {
    if (jj_scan_token(AT)) return true;
    return false;
  }

  final private boolean jj_3R_290() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_340()) {
    jj_scanpos = xsp;
    if (jj_3R_341()) {
    jj_scanpos = xsp;
    if (jj_3R_342()) return true;
    }
    }
    if (jj_3R_166()) return true;
    return false;
  }

  final private boolean jj_3R_394() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_392()) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_315() {
    if (jj_scan_token(SOME)) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    Token xsp;
    if (jj_3R_290()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_290()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_314() {
    if (jj_scan_token(EVERY)) return true;
    return false;
  }

  final private boolean jj_3R_313() {
    if (jj_scan_token(COUNT)) return true;
    return false;
  }

  final private boolean jj_3R_347() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_254()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_394()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_395()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(28)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_scan_token(CONS)) return true;
    if (jj_3R_166()) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_313()) {
    jj_scanpos = xsp;
    if (jj_3R_314()) {
    jj_scanpos = xsp;
    if (jj_3R_315()) return true;
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(BAR)) return true;
    if (jj_3R_316()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_3R_80()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_329() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_scan_token(CONS)) return true;
    if (jj_3R_166()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_289()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_329()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_167() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_3R_166()) return true;
    return false;
  }

  final private boolean jj_3R_396() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_348() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_3R_166()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_349() {
    if (jj_scan_token(QIF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_316()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_124()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_396()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(SPAWN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) return true;
    }
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(ONEOF)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(ONEOF)) return true;
    if (jj_3R_130()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_345() {
    if (jj_scan_token(MATCH)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_392()) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_130()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_229()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_130()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_228()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_423() {
    if (jj_scan_token(BAR)) return true;
    if (jj_3R_422()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_130()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_392() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) jj_scanpos = xsp;
    if (jj_3R_422()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_423()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_318() {
    if (jj_scan_token(NONE)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_scan_token(FIRST)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_318()) jj_scanpos = xsp;
    if (jj_scan_token(BAR)) return true;
    if (jj_3R_316()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(MAP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_462() {
    if (jj_scan_token(CHECKED)) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_461() {
    if (jj_scan_token(PRIO)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_483() {
    if (jj_3R_463()) return true;
    return false;
  }

  final private boolean jj_3R_460() {
    if (jj_scan_token(ENVELOPE)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_458() {
    if (jj_scan_token(TIMEOUT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_483()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(SECURITY)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_459() {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_422() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_459()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_460()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_461()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_462()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    if (jj_3R_463()) return true;
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_scan_token(SYNCCALL)) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_132()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_458()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_scan_token(QUERYAFTER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(BAR)) return true;
    if (jj_3R_316()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_261()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_263()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_scan_token(UNLESS)) return true;
    if (jj_3R_233()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(ORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    return false;
  }

  final private boolean jj_3R_234() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_233()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_3R_233()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_364() {
    if (jj_scan_token(NONE)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_473() {
    if (jj_scan_token(NONE)) return true;
    return false;
  }

  final private boolean jj_3R_443() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_476() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_363() {
    if (jj_scan_token(MOREL)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_317() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_363()) {
    jj_scanpos = xsp;
    if (jj_3R_364()) return true;
    }
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_3R_261()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_262()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_70()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_scan_token(QUERYSWISS)) return true;
    if (jj_3R_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_317()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(BAR)) return true;
    if (jj_3R_316()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  final private boolean jj_3R_442() {
    if (jj_scan_token(EQUALS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_476()) return true;
    }
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(FN)) return true;
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_441() {
    if (jj_scan_token(CHECKED)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(TABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_195()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_196()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_440() {
    if (jj_scan_token(PRIO)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_471() {
    if (jj_scan_token(UNTIL)) return true;
    return false;
  }

  final private boolean jj_3R_470() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  final private boolean jj_3R_502() {
    if (jj_scan_token(SECURITY)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_427() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_470()) {
    jj_scanpos = xsp;
    if (jj_3R_471()) return true;
    }
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_439() {
    if (jj_scan_token(ENVELOPE)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_scan_token(SEND)) return true;
    if (jj_3R_96()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_502()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_506() {
    if (jj_scan_token(SECURITY)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_438() {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_472() {
    if (jj_scan_token(MOREL)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(ASYNCCALL)) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_132()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_506()) jj_scanpos = xsp;
    return false;
  }

  public FisherParser2TokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[232];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
      jj_la1_5();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x10000000,0x0,0x1000,0x0,0x0,0x0,0x0,0x100,0x0,0x2000,0x20080900,0x1000,0x20000000,0x0,0x20080900,0x20080900,0x10000000,0x20080900,0x0,0x0,0x0,0x1000,0x1000,0x0,0x0,0x7305000,0x7305000,0x20080900,0x20080900,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x8000000,0x8000000,0x68000,0x68000,0x600,0x600,0x80000,0x80000,0x0,0x0,0x0,0x0,0x2000,0x80000,0x20080900,0x20000100,0x20080900,0x1000,0x1000,0x20080900,0x0,0xc0000000,0x0,0x0,0x20000900,0x0,0x0,0x4000,0x0,0x0,0x0,0x1000,0x20080900,0x0,0x0,0x1000,0x1000,0x0,0x0,0x2000,0x20080900,0x1000,0x800,0x8000100,0x8000100,0x8000000,0x0,0x1000,0x20080900,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x1000,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x20080900,0x20080900,0x0,0x0,0x1000,0x20000000,0x0,0x0,0x10000000,0x0,0x0,0x0,0x20080900,0x20080900,0x20080900,0x20080900,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x804000,0x0,0x0,0x0,0x0,0x10000000,0x20080900,0x20080900,0x0,0x4000,0x10000000,0x4000,0x20080900,0x20000000,0x1000,0x0,0x20080900,0x0,0x1000,0x0,0x20000000,0x10000000,0x10000000,0x0,0x1000,0x20000000,0x0,0x20080900,0x20080900,0x20080900,0x20080900,0x10000000,0x20080900,0x0,0x4000,0x0,0x0,0x4000,0x4000,0x0,0x0,0x0,0x1000,0x1000,0x0,0x0,0x0,0x20000000,0x0,0x20080900,0x20080900,0x0,0x20080900,0x20080900,0x10000000,0x20080900,0x0,0x10000000,0x0,0x10000000,0x0,0x20000000,0x0,0x0,0x1000,0x0,0x1000,0x0,0x0,0x20080900,0x10000000,0x10000000,0x0,0x0,0x20080900,0x20080900,0x0,0x2000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x8,0x8,0x8,0x0,0x0,0x0,0xc40015,0x0,0x0,0x0,0xc40015,0xc40015,0x0,0xc40015,0x0,0x4,0x4,0x0,0x0,0x8000000,0x8000000,0x108000,0x108000,0xc40015,0xc40015,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x1f00,0x1f00,0x0,0x0,0x10,0x10,0x40,0x80,0x80,0x0,0x0,0x10,0xc40015,0x40005,0xc40015,0x0,0x0,0xc40015,0x0,0x0,0x4,0x4,0xc40005,0x4000,0x4,0x4,0x0,0x0,0x0,0x0,0xc40015,0x0,0x1000000,0x0,0x0,0x0,0x40004,0x0,0xc40015,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc40015,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0xc40015,0xc40015,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc40015,0xc40015,0xc40015,0xc40015,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,0x4000,0x2000000,0x4000000,0x20000000,0x10000000,0x4,0x4,0x2000000,0x4000000,0x20000000,0x10000000,0x0,0x4000,0x4000,0x0,0x0,0x0,0xc40015,0xc40015,0x0,0x0,0x0,0x0,0xc40015,0x0,0x0,0x0,0xc40015,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0xc40015,0xc40015,0xc40015,0xc40015,0x4,0xc40015,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0xc40015,0xc40015,0x0,0xc40015,0xc40015,0x0,0xc40015,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x15,0x0,0x0,0x15,0xc40015,0x0,0x0,0x0,0x0,0xc40015,0xc40015,0x20,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000400,0x0,0x87ed6502,0x0,0x0,0x8000,0x9fede502,0x9fede502,0x0,0x9fede502,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x87ed6502,0x87ed6502,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x30,0x30,0x34,0x34,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x20000400,0x0,0x0,0x87ed6502,0x0,0x87ed6502,0x0,0x0,0x87ed6502,0x0,0x0,0x8000,0x8000,0x87ed6502,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x87ed6502,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x87ed6502,0x0,0x0,0x0,0x0,0x0,0x3ed6000,0x0,0x87ed6502,0x0,0x0,0xc0,0x0,0xc0,0xc0,0x80,0x0,0x680000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x1a4000,0xc0,0xc0,0xc0,0xc0,0x0,0xc0,0x87ed6502,0x9fede502,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x9fede502,0x9fede502,0x9fede502,0x87ed6502,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc7ed6502,0xc7ed6502,0x0,0x0,0x0,0x0,0xc7ed6502,0x0,0x0,0x0,0xc7ed6502,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9fed6502,0x9fed6502,0x9fed6502,0x9fed6502,0x0,0x9fed6502,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x97ed6502,0x97ed6502,0x0,0x97ed6502,0x97ed6502,0x0,0x97ed6502,0x0,0x0,0x0,0x0,0x10000000,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x9fede502,0x0,0x0,0x8000000,0x0,0x9fede502,0x9fede502,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20200000,0x0,0x3c002a,0x0,0x0,0xc0000000,0xfc3f042e,0xfc3f042e,0x0,0xfc3f042e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x203c002a,0x3c002a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20200000,0x0,0x40000,0x3c002a,0x0,0x203c002a,0x0,0x0,0x203c002a,0x2,0x0,0xc0000000,0xc0000000,0x38002a,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x3c002a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c002a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c002a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c002a,0xfc3f042e,0x0,0x0,0x0,0x0,0x1800,0x1800,0x0,0x0,0x0,0x0,0xfc3f042e,0xfc3f042e,0xfc3f042e,0x203c002a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3e002e,0x3e002a,0x0,0x0,0x0,0x0,0x3e002e,0x0,0x0,0x1,0x3e002a,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x13bf002a,0x13bf002a,0x13bf002a,0x13bf002a,0x0,0x13bf002a,0x0,0x0,0x0,0x1800000,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x100000,0x100000,0x100000,0x0,0x0,0x103e233a,0x103e233a,0x0,0x103e233a,0x103e233a,0x0,0x103e233a,0x2010,0x0,0x0,0x0,0x10000000,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0xfc3f042e,0x0,0x0,0x8,0x400000,0xfc7f042e,0xfc7f042e,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x80000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0xb800001c,0x0,0x0,0x80e000,0xb8fee41c,0xb8fee41c,0x0,0xb8fee41c,0x80080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb800001c,0xb800001c,0x1000000,0xc000,0xc000,0x20,0x40,0x80,0xe0,0xe0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x300,0x300,0x80000000,0x0,0x0,0xb800001c,0x0,0xb800001c,0x0,0x0,0xb800001c,0xb800001c,0x0,0x80e000,0x80e000,0xb800001c,0x0,0x0,0x0,0x3800001c,0x80000000,0x80000000,0x0,0xb800001c,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0xb800001c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb8264c1c,0x0,0x800,0x0,0x240000,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x80000c00,0x80000c00,0x0,0x80000c00,0x0,0x800,0x80000c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb800001c,0xb8fee41c,0x80000000,0x80000000,0x0,0x0,0x1000001,0x1000001,0x0,0x0,0xc000,0x10000,0xb8fee41c,0xb8fee41c,0xb8fee41c,0xb800001c,0x80000000,0x80000000,0x240000,0x240000,0x0,0x340000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x2,0x0,0xb8000c1c,0xb8000c1c,0x80000000,0x0,0x0,0x0,0xb8000c1c,0x0,0x0,0x0,0xb8000c1c,0x400,0x0,0x80000400,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0xba000c1c,0xba000c1c,0xba000c1c,0xba000c1c,0x0,0xba000c1c,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0xc00,0x80000c00,0x0,0x0,0x80000c00,0x80000c00,0x80000c00,0x0,0x80000000,0xb8000c1c,0xb8000c1c,0x80000000,0xb8000c1c,0xb8000c1c,0x0,0xb8000c1c,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x1c,0x0,0x80000000,0x1c,0xb8fee41c,0x0,0x0,0x0,0x800,0xb8feec1c,0xb8feec1c,0x0,0x0,};
   }
   private static void jj_la1_5() {
      jj_la1_5 = new int[] {0x0,0x1,0x0,0x1,0x2,0x2,0x2,0x0,0x0,0x0,0xfd,0x0,0x0,0x0,0xfd,0xfd,0x0,0xfd,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfd,0xfd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x500,0x500,0x1,0x0,0x0,0xfd,0x0,0xfd,0x0,0x0,0xfd,0xfd,0x0,0x0,0x0,0xfd,0x0,0x0,0x0,0xfc,0x1,0x1,0x0,0xfd,0x4,0x0,0x0,0x0,0x1,0x0,0x0,0xfd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfd,0xfd,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfd,0xfd,0xfd,0xfd,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfd,0xfd,0x1,0x0,0x0,0x0,0xfd,0x0,0x0,0x0,0xfd,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfd,0xfd,0xfd,0xfd,0x0,0xfd,0x0,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x1,0x1,0x0,0x1,0xfd,0xfd,0x1,0xfd,0xfd,0x0,0xfd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfc,0x0,0x1,0xfc,0xfd,0x0,0x0,0x0,0x0,0xfd,0xfd,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[23];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public FisherParser2(java.io.InputStream stream) {
     this(stream, null);
  }
  public FisherParser2(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FisherParser2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 232; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 232; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FisherParser2(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FisherParser2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 232; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 232; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FisherParser2(FisherParser2TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 232; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(FisherParser2TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 232; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[172];
    for (int i = 0; i < 172; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 232; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 172; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 23; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
