/* Generated By:JavaCC: Do not edit this line. FisherParser2TokenManager.java */
package fisher.parser;
import fisher.desugar.*;
import fisher.syn.*;
import fisher.syn.core.*;
import fisher.syn.interfaces.*;
import fisher.syn.converters.*;
import fisher.util.FisherSource;
import java.util.*;
import fisher.util.FisherException;
import static fisher.util.Bard.*;
import fisher.runtime.*;

public class FisherParser2TokenManager implements FisherParser2Constants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x622000L) != 0L || (active1 & 0x5L) != 0L)
            return 21;
         if ((active1 & 0x40000000L) != 0L || (active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 159;
            return 29;
         }
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x3000000000000000L) != 0L || (active2 & 0x20012L) != 0L)
         {
            jjmatchedKind = 159;
            return 88;
         }
         if ((active0 & 0x400000000L) != 0L)
            return 18;
         if ((active0 & 0x3c00000000040000L) != 0L || (active1 & 0xcffbffbbbc000c00L) != 0L || (active2 & 0x32dfe09L) != 0L)
         {
            jjmatchedKind = 159;
            return 33;
         }
         if ((active1 & 0x400000000L) != 0L || (active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 159;
            return 25;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 38;
         if ((active0 & 0x8004000000L) != 0L)
            return 93;
         if ((active0 & 0x80000000000L) != 0L)
            return 15;
         if ((active1 & 0x4000000000L) != 0L || (active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 159;
            return 77;
         }
         if ((active0 & 0xc012810000000000L) != 0L || (active2 & 0x10000000000L) != 0L)
            return 9;
         if ((active1 & 0x39f3000L) != 0L)
            return 125;
         if ((active0 & 0x100000008000000L) != 0L || (active1 & 0x10L) != 0L || (active2 & 0xa0000000000L) != 0L)
            return 177;
         if ((active0 & 0x700L) != 0L || (active1 & 0x8L) != 0L)
            return 6;
         return -1;
      case 1:
         if ((active0 & 0x3e00000000000000L) != 0L || (active1 & 0xdffb7d8ffc000c00L) != 0L || (active2 & 0x32fbe1dL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 159;
               jjmatchedPos = 1;
            }
            return 33;
         }
         if ((active1 & 0x1000000L) != 0L)
            return 133;
         if ((active0 & 0x40000L) != 0L || (active1 & 0x2000823000000000L) != 0L || (active2 & 0x104000L) != 0L)
            return 33;
         if ((active1 & 0x10000L) != 0L)
            return 159;
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 72;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active2 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 159;
               jjmatchedPos = 1;
            }
            return 87;
         }
         if ((active1 & 0x4000000000L) != 0L || (active2 & 0x400000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 159;
               jjmatchedPos = 1;
            }
            return 76;
         }
         if ((active1 & 0x800000L) != 0L)
            return 168;
         if ((active0 & 0x600L) != 0L)
            return 5;
         return -1;
      case 2:
         if ((active2 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 159;
               jjmatchedPos = 2;
            }
            return 89;
         }
         if ((active1 & 0x9070400444000800L) != 0L || (active2 & 0x20e00L) != 0L)
            return 33;
         if ((active1 & 0x800000L) != 0L)
            return 167;
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 72;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x3e00000000000000L) != 0L || (active1 & 0x4f8b3fdbb8000400L) != 0L || (active2 & 0x36db01dL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 159;
               jjmatchedPos = 2;
            }
            return 33;
         }
         return -1;
      case 3:
         if ((active0 & 0x1c00000000000000L) != 0L || (active1 & 0x4fcb1ed99c000400L) != 0L || (active2 & 0x36ca013L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 3;
            return 33;
         }
         if ((active0 & 0x2200000000000000L) != 0L || (active1 & 0x210220000000L) != 0L || (active2 & 0x1100cL) != 0L)
            return 33;
         return -1;
      case 4:
         if ((active1 & 0x4409160814000400L) != 0L || (active2 & 0x242011L) != 0L)
            return 33;
         if ((active0 & 0x1c00000000000000L) != 0L || (active1 & 0xbc208d188000000L) != 0L || (active2 & 0x3488002L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 4;
            return 33;
         }
         return -1;
      case 5:
         if ((active1 & 0x2c208c080000000L) != 0L || (active2 & 0x2408000L) != 0L)
            return 33;
         if ((active0 & 0x1c00000000000000L) != 0L || (active1 & 0x900001108000000L) != 0L || (active2 & 0x1080002L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 5;
            return 33;
         }
         return -1;
      case 6:
         if ((active0 & 0xc00000000000000L) != 0L || (active1 & 0x800001008000000L) != 0L || (active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 6;
            return 33;
         }
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x100000100000000L) != 0L || (active2 & 0x1000002L) != 0L)
            return 33;
         return -1;
      case 7:
         if ((active1 & 0x1008000000L) != 0L || (active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 7;
            return 33;
         }
         if ((active0 & 0xc00000000000000L) != 0L || (active1 & 0x800000000000000L) != 0L)
            return 33;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 36:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L, 0x0L);
      case 37:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x39f2000L, 0x0L);
      case 38:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20L);
      case 40:
         return jjStopAtPos(0, 29);
      case 41:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L, 0x0L);
      case 42:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L, 0x0L);
      case 44:
         return jjStopAtPos(0, 12);
      case 45:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x1000001000000L, 0x0L, 0x0L);
      case 46:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x600L, 0x8L, 0x0L);
      case 47:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x620000L, 0x5L, 0x0L);
      case 59:
         return jjStopAtPos(0, 28);
      case 60:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0xc012800000000000L, 0x0L, 0x10000000000L);
      case 61:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x808000L, 0x0L, 0x0L);
      case 62:
         return jjStartNfaWithStates_0(0, 43, 15);
      case 63:
         return jjStopAtPos(0, 16);
      case 64:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x10L, 0xa0000000000L);
      case 91:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000000L);
      case 92:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L, 0x0L);
      case 93:
         return jjStopAtPos(0, 33);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80L);
      case 95:
         return jjStopAtPos(0, 65);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1920000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400280000000000L, 0x1000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x800000018000000L, 0x1L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x100000000L, 0x10000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x3000000000000000L, 0x20012L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x2003000000000L, 0x4000L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x250000000000000L, 0x2200L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20400080000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x180000020000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L, 0x400000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x8058800000000L, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000200000400L, 0x1000008L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x208000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L, 0xc00L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000L);
      case 123:
         return jjStartNfaWithStates_0(0, 34, 18);
      case 124:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40L);
      case 125:
         return jjStartNfaWithStates_0(0, 35, 38);
      case 126:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L, 0x0L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000000L, active1, 0L, active2, 0L);
      case 38:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(1, 133);
         break;
      case 40:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 42:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 45:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x12000000000000L, active1, 0L, active2, 0L);
      case 46:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 58:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 60:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 61:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 62:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 169);
         break;
      case 63:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 64:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 168);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 170);
         break;
      case 91:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      case 93:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 171);
         break;
      case 94:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000004010400L, active2, 0x2003c11L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x2000c4440000800L, active2, 0x400000L);
      case 102:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 142, 33);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x4000000200000000L, active2, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1080002L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000010020000L, active2, 0x10000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 125, 33);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x1000000000L, active2, 0x208000L);
      case 111:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 148, 33);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x840200008000000L, active2, 0x20200L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2200000000000000L, active1, 0x8520000000100000L, active2, 0x8L);
      case 115:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000800000L, active2, 0L);
      case 116:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 101, 33);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8001000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1088000020000000L, active2, 0x4L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 124:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         break;
      case 126:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(2, 52);
         break;
      case 60:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(2, 10);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(2, 47);
         break;
      case 61:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      case 62:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(2, 49);
         break;
      case 64:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(2, 55);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8811000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000400L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 117, 33);
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40200000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x400000000100000L, active2, 0L);
      case 102:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 94, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000010000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x101005200020000L, active2, 0x40000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 108:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000L, active2, 0x8014L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000008000000L, active2, 0x1000000L);
      case 110:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 110, 33);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 124, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800010000000000L, active2, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x880000L, active2, 0L);
      case 112:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 116, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xa000000000000L, active2, 0L);
      case 114:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 138, 33);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 145, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000040022000000L, active2, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100100000000L, active2, 0x602001L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L, active2, 0x2000000L);
      case 119:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 98, 33);
         break;
      case 121:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 33);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 127, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 126:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x401000000000000L, active2, 0x2000002L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200008001000000L, active2, 0L);
      case 99:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 104, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L, active2, 0x2001L);
      case 100:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 140, 33);
         break;
      case 101:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 93, 33);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 131, 33);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 144, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x8100180000000L, active2, 0x1008000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200000L);
      case 108:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 130, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000400L, active2, 0x40000L);
      case 109:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 33);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x24000000000L, active2, 0x80000L);
      case 111:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4002080006000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 115:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10020000L, active2, 0x10L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800001000010000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x40000000080000L, active2, 0x400000L);
      case 118:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(3, 84);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100040000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 121:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 109, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000000L, active2, 0x80000L);
      case 99:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 33);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 106, 33);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 132, 33);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 146, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000010000L, active2, 0L);
      case 102:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 33);
         break;
      case 104:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 128, 33);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 141, 33);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x880005000000000L, active2, 0L);
      case 107:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 122, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 149, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0x40008001000000L, active2, 0x2000002L);
      case 110:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100080000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000L, active2, 0x1000000L);
      case 114:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 33);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x2080000000000L, active2, 0x400000L);
      case 115:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 33);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(4, 81);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(4, 87);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 119:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 126, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 99:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 33);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 101:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(5, 88);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 33);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 33);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 118, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 110:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 150, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000008000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 112:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 89);
         break;
      case 114:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(5, 80);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 121, 33);
         break;
      case 115:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 143, 33);
         break;
      case 116:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(5, 83);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 33);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 33);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 113, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000000L, active2, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      case 121:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 153, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 33);
         break;
      case 101:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 120, 33);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 96, 33);
         break;
      case 116:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 152, 33);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000000000L, active2, 0x80000L);
      case 121:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 129, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 33);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 123, 33);
         break;
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 121:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 147, 33);
         break;
      case 116:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 91, 33);
         break;
      case 121:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 100, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1, active2);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x4000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0x0L, 0x1000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x100000000L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x2000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x200000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x400000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x0L, 0x0L, 0x0L, 0x80000000000000L
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec11 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec12 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec13 = {
   0x4000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x0L, 0x0L, 0x0L, 0x1L
};
static final long[] jjbitVec15 = {
   0x0L, 0x0L, 0x0L, 0x10L
};
static final long[] jjbitVec16 = {
   0x80000000000L, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 184;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 25:
               case 33:
                  if ((0x83ff008200000000L & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 38:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 125:
                  if (curChar == 60)
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  break;
               case 88:
                  if ((0x83ff008200000000L & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 37)
                     jjAddStates(3, 15);
                  else if (curChar == 47)
                     jjAddStates(16, 17);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 72;
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 63;
                  else if (curChar == 33)
                  {
                     if (kind > 114)
                        kind = 114;
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 35)
                     jjCheckNAddStates(18, 20);
                  if (curChar == 48)
                     jjAddStates(21, 23);
                  else if (curChar == 39)
                     jjCheckNAddStates(24, 26);
                  else if (curChar == 34)
                     jjCheckNAddStates(27, 29);
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 89:
                  if ((0x83ff008200000000L & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 87:
                  if ((0x83ff008200000000L & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 93:
                  if (curChar == 42)
                     jjCheckNAddStates(30, 32);
                  else if (curChar == 47)
                     jjCheckNAddStates(33, 35);
                  break;
               case 77:
                  if ((0x83ff008200000000L & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 29:
                  if ((0x83ff008200000000L & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 76:
                  if ((0x83ff008200000000L & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 177:
                  if (curChar == 45)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 46 && kind > 11)
                     kind = 11;
                  break;
               case 6:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if (curChar == 61 && kind > 41)
                     kind = 41;
                  break;
               case 10:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 61 && kind > 42)
                     kind = 42;
                  break;
               case 13:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if (curChar == 61 && kind > 44)
                     kind = 44;
                  break;
               case 16:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 58 && kind > 50)
                     kind = 50;
                  break;
               case 22:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 27:
                  if (curChar == 33 && kind > 114)
                     kind = 114;
                  break;
               case 35:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 39:
                  if ((0x83ff008200000000L & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 46:
                  if (curChar == 34)
                     jjCheckNAddStates(27, 29);
                  break;
               case 47:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 49:
                  if ((0x9400000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 50:
                  if (curChar == 34 && kind > 164)
                     kind = 164;
                  break;
               case 51:
                  if (curChar == 39)
                     jjCheckNAddStates(24, 26);
                  break;
               case 52:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 54:
                  if ((0x9400000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 55:
                  if (curChar == 39 && kind > 165)
                     kind = 165;
                  break;
               case 56:
                  if (curChar == 34)
                     jjCheckNAddStates(40, 42);
                  break;
               case 57:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 58:
                  if (curChar == 34 && kind > 166)
                     kind = 166;
                  break;
               case 59:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(57, 62);
                  break;
               case 62:
                  if (curChar == 34)
                     jjCheckNAdd(57);
                  break;
               case 63:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 64:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 39)
                     jjCheckNAddStates(43, 45);
                  break;
               case 66:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 67:
                  if (curChar == 39 && kind > 167)
                     kind = 167;
                  break;
               case 68:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(66, 71);
                  break;
               case 71:
                  if (curChar == 39)
                     jjCheckNAdd(66);
                  break;
               case 72:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 73:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 92:
                  if (curChar == 47)
                     jjAddStates(16, 17);
                  break;
               case 94:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 95:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 96:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 97:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 42)
                     jjCheckNAddStates(30, 32);
                  break;
               case 99:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 100:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 101:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 102:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 103:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 109:
                  if (curChar == 48)
                     jjAddStates(21, 23);
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 156)
                     kind = 156;
                  jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAddStates(0, 2);
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAdd(117);
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(118, 119);
                  break;
               case 119:
                  if (curChar == 46)
                     jjCheckNAdd(120);
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAddTwoStates(120, 121);
                  break;
               case 122:
                  if (curChar == 45)
                     jjCheckNAdd(123);
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAdd(123);
                  break;
               case 124:
                  if (curChar == 37)
                     jjAddStates(3, 15);
                  break;
               case 130:
                  if (curChar == 49 && kind > 70)
                     kind = 70;
                  break;
               case 135:
                  if (curChar == 60 && kind > 71)
                     kind = 71;
                  break;
               case 144:
                  if (curChar == 48 && kind > 71)
                     kind = 71;
                  break;
               case 179:
                  if (curChar == 36 && kind > 72)
                     kind = 72;
                  break;
               case 180:
                  if (curChar == 43 && kind > 73)
                     kind = 73;
                  break;
               case 181:
                  if (curChar == 42 && kind > 73)
                     kind = 73;
                  break;
               case 182:
                  if (curChar == 47 && kind > 73)
                     kind = 73;
                  break;
               case 183:
                  if (curChar == 45 && kind > 73)
                     kind = 73;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 133:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 146;
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 141;
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(33);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 38:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 161)
                        kind = 161;
                     jjCheckNAdd(39);
                  }
                  else if (curChar == 96)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 125:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 174;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 168;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 159;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 156;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 147;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 138;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 128;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 164;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 152;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 142;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 88:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(33);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 90;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(33);
                  }
                  else if (curChar == 64)
                     jjAddStates(46, 52);
                  else if (curChar == 125)
                     jjAddStates(53, 55);
                  else if (curChar == 96)
                     jjCheckNAddTwoStates(35, 36);
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 18;
                  if (curChar == 102)
                     jjAddStates(56, 57);
                  else if (curChar == 114)
                     jjAddStates(58, 59);
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 89:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(33);
                  }
                  if (curChar == 100)
                  {
                     if (kind > 79)
                        kind = 79;
                  }
                  break;
               case 87:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(33);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 89;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(33);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(33);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 76:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(33);
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 177:
                  if (curChar == 126 && kind > 72)
                     kind = 72;
                  break;
               case 1:
                  jjAddStates(18, 20);
                  break;
               case 19:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if (curChar == 125 && kind > 51)
                     kind = 51;
                  break;
               case 24:
                  if (curChar == 116 && kind > 114)
                     kind = 114;
                  break;
               case 26:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 28:
                  if (curChar == 118 && kind > 136)
                     kind = 136;
                  break;
               case 30:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 35:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 36:
                  if (curChar == 96 && kind > 160)
                     kind = 160;
                  break;
               case 37:
                  if (curChar == 125)
                     jjAddStates(53, 55);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 41:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 96 && kind > 161)
                     kind = 161;
                  break;
               case 43:
                  if (curChar == 102 && kind > 161)
                     kind = 161;
                  break;
               case 44:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 47:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 48:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 52:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 53:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 57:
                  jjAddStates(40, 42);
                  break;
               case 66:
                  jjAddStates(43, 45);
                  break;
               case 74:
                  if (curChar == 114)
                     jjAddStates(58, 59);
                  break;
               case 75:
                  if (curChar == 118 && kind > 151)
                     kind = 151;
                  break;
               case 78:
                  if (curChar == 101 && kind > 151)
                     kind = 151;
                  break;
               case 79:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 102)
                     jjAddStates(56, 57);
                  break;
               case 85:
                  if (curChar == 116 && kind > 79)
                     kind = 79;
                  break;
               case 86:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 90:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 94:
                  jjAddStates(33, 35);
                  break;
               case 99:
               case 101:
                  jjCheckNAddStates(30, 32);
                  break;
               case 110:
                  if (curChar == 120)
                     jjCheckNAdd(111);
                  break;
               case 111:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjCheckNAdd(111);
                  break;
               case 112:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 114:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 121:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(60, 61);
                  break;
               case 126:
                  if (curChar == 121 && kind > 70)
                     kind = 70;
                  break;
               case 127:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 131:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 134:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 136:
                  if (curChar == 101 && kind > 71)
                     kind = 71;
                  break;
               case 137:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 110 && kind > 71)
                     kind = 71;
                  break;
               case 141:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 145:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 116 && kind > 78)
                     kind = 78;
                  break;
               case 150:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 100 && kind > 78)
                     kind = 78;
                  break;
               case 155:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 108 && kind > 85)
                     kind = 85;
                  break;
               case 159:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 121 && kind > 85)
                     kind = 85;
                  break;
               case 162:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 101 && kind > 86)
                     kind = 86;
                  break;
               case 167:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 115 && kind > 86)
                     kind = 86;
                  break;
               case 171:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 64)
                     jjAddStates(46, 52);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 25:
               case 33:
                  if (!jjCanMove_9(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 38:
                  if (!jjCanMove_8(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAdd(39);
                  break;
               case 88:
                  if (!jjCanMove_9(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(33);
                  }
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     jjAddStates(62, 63);
                  break;
               case 89:
                  if (!jjCanMove_9(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 87:
                  if (!jjCanMove_9(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 77:
                  if (!jjCanMove_9(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 29:
                  if (!jjCanMove_9(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 76:
                  if (!jjCanMove_9(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(18, 20);
                  break;
               case 8:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 11)
                     kind = 11;
                  break;
               case 11:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 41)
                     kind = 41;
                  break;
               case 14:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 42)
                     kind = 42;
                  break;
               case 17:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 44)
                     kind = 44;
                  break;
               case 20:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 50)
                     kind = 50;
                  break;
               case 23:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 51)
                     kind = 51;
                  break;
               case 31:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2) && kind > 136)
                     kind = 136;
                  break;
               case 32:
                  if (!jjCanMove_8(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(33);
                  break;
               case 35:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(36, 37);
                  break;
               case 39:
                  if (!jjCanMove_9(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAdd(39);
                  break;
               case 41:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(38, 39);
                  break;
               case 47:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(27, 29);
                  break;
               case 52:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(24, 26);
                  break;
               case 57:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(40, 42);
                  break;
               case 66:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(43, 45);
                  break;
               case 94:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(33, 35);
                  break;
               case 99:
               case 101:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(30, 32);
                  break;
               case 104:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     jjAddStates(62, 63);
                  break;
               case 105:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2) && kind > 50)
                     kind = 50;
                  break;
               case 106:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2) && kind > 51)
                     kind = 51;
                  break;
               case 108:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 184 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   117, 118, 119, 125, 129, 134, 135, 139, 143, 148, 153, 157, 160, 165, 169, 175, 
   93, 98, 1, 2, 4, 110, 112, 114, 52, 53, 55, 47, 48, 50, 99, 100, 
   103, 94, 95, 97, 35, 36, 41, 42, 57, 60, 61, 66, 69, 70, 177, 178, 
   179, 180, 181, 182, 183, 38, 40, 45, 88, 91, 77, 83, 122, 123, 106, 108, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec3[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec4[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec5[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec6[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec7[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec9[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec11[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec11[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec13[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_11(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 3:
         return ((jjbitVec14[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_12(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec15[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_13(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec16[i2] & l2) != 0L);
      default : 
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\56", "\56\56", "\56\56\74", 
null, "\54", "\72", "\75", "\75\75", "\77", "\72\77", "\151\156", "\53", "\53\75", 
"\72\72\75", "\72\76", "\75\76", "\55\75", "\52\75", "\57\75", "\100", "\73", "\50", "\51", 
"\51\77", "\133", "\135", "\173", "\175", "\55", "\46", "\52", "\57", "\74", null, null, 
"\76", null, "\176", "\174", "\74\74\74", "\55\76", "\74\55\76", null, null, 
"\74\55\55", "\44", "\44\50", "\176\41\100", "\100\41\176", "\146\162\157\155", 
"\145\156\166\145\154\157\160\145", "\163\145\143\165\162\151\164\171", "\143\150\145\143\153\145\144", 
"\160\162\151\157", "\74\55", "\74\176", "\72\75", "\137", "\72\72", "\56\52", "\100\75", 
"\134\75", null, null, null, null, "\164\141\142\154\145", "\153\145\171", "\45", 
"\45\50", null, null, "\45\141\146\164\145\162", "\45\154\151\163\164", "\45\133", 
"\45\143\157\165\156\164", "\45\162\145\166", null, null, "\45\163\157\162\164", 
"\45\164\141\142\154\145", "\45\147\162\157\165\160", "\166\141\154\157\146", 
"\143\157\155\160\157\156\145\156\164", "\143\154\141\163\163", "\160\165\162\145", "\144\145\146", 
"\157\142\152\145\143\164", "\145\170\164\145\156\144\163", "\164\150\151\163", "\156\145\167", 
"\163\160\141\167\156", "\151\156\151\164\151\141\154\154\171", "\151\164", 
"\162\145\151\156\151\164", "\163\164\141\142\154\145", "\163\171\156\143", "\141\163\171\156\143", 
"\163\145\162\166\145", "\142\145\146\157\162\145", "\141\146\164\145\162", "\142\157\144\171", 
"\157\167\156", "\141\163", "\141\154\151\141\163", "\151\155\160\157\162\164", null, 
"\163\165\160\145\162", "\155\141\160", "\157\162\144", "\155\157\144\165\154\145", 
"\160\165\142\154\151\143", "\160\162\151\166\141\164\145", "\155\145\155\142\145\162", 
"\142\162\145\141\153", "\143\157\156\164\151\156\165\145", "\146\165\156", "\146\156", 
"\164\150\162\157\167", "\164\162\171", "\143\141\164\143\150", "\146\151\156\141\154\154\171", 
"\156\165\154\154", "\164\162\165\145", "\146\141\154\163\145", "\46\46", "\174\174", "\136\136", 
null, "\155\157\144", "\166\141\162", "\166\141\154", "\142\141\162\144", 
"\155\141\164\143\150", "\151\146", "\165\156\154\145\163\163", "\145\154\163\145", "\146\157\162", 
"\167\150\151\154\145", "\163\151\147\156\141\164\165\162\145", "\144\157", "\165\156\164\151\154", 
"\162\145\164\165\162\156", null, "\164\151\155\145\157\165\164", "\152\141\166\141\154\171", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\74\100", 
"\100\76", "\133\100", "\100\135", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0xffffffffffffffffL, 0xfffbbffffffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe0L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[184];
private final int[] jjstateSet = new int[368];
protected char curChar;
public FisherParser2TokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public FisherParser2TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 184; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
