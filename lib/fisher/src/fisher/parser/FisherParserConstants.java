/* Generated By:JavaCC: Do not edit this line. FisherParserConstants.java */
package fisher.parser;

public interface FisherParserConstants {

  int EOF = 0;
  int TABBY_COMMENT = 5;
  int LOKI_COMMENT = 6;
  int OTHER_TABBY_COMMENT = 7;
  int DOT = 8;
  int DOTDOT = 9;
  int DOTDOTLT = 10;
  int ELLIPSIS = 11;
  int COMMA = 12;
  int COLON = 13;
  int EQUALS = 14;
  int EQEQ = 15;
  int QUESTION = 16;
  int TYPE = 17;
  int IN = 18;
  int PLUS = 19;
  int PLUSAB = 20;
  int CONSAB = 21;
  int COLONGT = 22;
  int ARROW2R = 23;
  int MINUSAB = 24;
  int TIMESAB = 25;
  int FDIVAB = 26;
  int AT = 27;
  int SEMI = 28;
  int LPAREN = 29;
  int RPAREN = 30;
  int RPARENQU = 31;
  int LBRACKET = 32;
  int RBRACKET = 33;
  int LBRACE = 34;
  int RBRACE = 35;
  int MINUS = 36;
  int AMPERSAND = 37;
  int STAR = 38;
  int SLASH = 39;
  int LT = 40;
  int LE = 41;
  int NE = 42;
  int GT = 43;
  int GE = 44;
  int TILDE = 45;
  int BAR = 46;
  int SEND = 47;
  int RARROW = 48;
  int SYNCCALL = 49;
  int LRECBRACE = 50;
  int RRECBRACE = 51;
  int ASYNCCALL = 52;
  int DOLLAR = 53;
  int DOLLARLPAREN = 54;
  int PROBE = 55;
  int PROBECOUNT = 56;
  int FROM = 57;
  int ENVELOPE = 58;
  int SECURITY = 59;
  int CHECKED = 60;
  int PRIO = 61;
  int ITER_DEM = 62;
  int ITER_INQ = 63;
  int GETS = 64;
  int WILD = 65;
  int CONS = 66;
  int DOTSTAR = 67;
  int ADDTO = 68;
  int DELFROM = 69;
  int MOREL = 70;
  int NONE = 71;
  int METHODLY1 = 72;
  int METHODLY2 = 73;
  int TABLE = 74;
  int KEY = 75;
  int PERCENT = 76;
  int QUERYSWISS = 77;
  int FIRST = 78;
  int QIF = 79;
  int QUERYAFTER = 80;
  int QUERYLISTWORD = 81;
  int QUERYLIST = 82;
  int COUNT = 83;
  int QUERYREV = 84;
  int EVERY = 85;
  int SOME = 86;
  int QUERYSORT = 87;
  int QUERYTABLE = 88;
  int QUERYGROUP = 89;
  int VALOF = 90;
  int COMPONENT = 91;
  int CLASS = 92;
  int PURE = 93;
  int METH = 94;
  int OBJECT = 95;
  int EXTENDS = 96;
  int THIS = 97;
  int NEW = 98;
  int SPAWN = 99;
  int INITIALLY = 100;
  int IT = 101;
  int REINIT = 102;
  int STABLE = 103;
  int SYNC = 104;
  int ASYNC = 105;
  int SERVE = 106;
  int BEFORE = 107;
  int AFTER = 108;
  int BODY = 109;
  int OWN = 110;
  int AS = 111;
  int ALIAS = 112;
  int IMPORT = 113;
  int NOT = 114;
  int SUPER = 115;
  int MAP = 116;
  int ORD = 117;
  int MODULE = 118;
  int PUBLIC = 119;
  int PRIVATE = 120;
  int MEMBER = 121;
  int BREAK = 122;
  int CONTINUE = 123;
  int FUN = 124;
  int FN = 125;
  int THROW = 126;
  int TRY = 127;
  int CATCH = 128;
  int FINALLY = 129;
  int NULL = 130;
  int TRUE = 131;
  int FALSE = 132;
  int AND = 133;
  int OR = 134;
  int ONEOF = 135;
  int IDIV = 136;
  int MOD = 137;
  int VAR = 138;
  int VAL = 139;
  int BARD = 140;
  int MATCH = 141;
  int IF = 142;
  int UNLESS = 143;
  int ELSE = 144;
  int FOR = 145;
  int WHILE = 146;
  int SIGNATURE = 147;
  int DO = 148;
  int UNTIL = 149;
  int RETURN = 150;
  int RECV = 151;
  int TIMEOUT = 152;
  int JAVALY = 153;
  int ALPHA = 154;
  int HEXINT = 155;
  int OCTINT = 156;
  int BININT = 157;
  int ID_MID = 158;
  int ID1 = 159;
  int ID2 = 160;
  int CLOSE_ID = 161;
  int INT = 162;
  int FLOAT = 163;
  int STRING2 = 164;
  int STRING1 = 165;
  int STRING4 = 166;
  int STRING3 = 167;

  int DEFAULT = 0;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<TABBY_COMMENT>",
    "<LOKI_COMMENT>",
    "<OTHER_TABBY_COMMENT>",
    "\".\"",
    "\"..\"",
    "\"..<\"",
    "<ELLIPSIS>",
    "\",\"",
    "\":\"",
    "\"=\"",
    "\"==\"",
    "\"?\"",
    "\":?\"",
    "\"in\"",
    "\"+\"",
    "\"+=\"",
    "\"::=\"",
    "\":>\"",
    "\"=>\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"@\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\")?\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"-\"",
    "\"&\"",
    "\"*\"",
    "\"/\"",
    "\"<\"",
    "<LE>",
    "<NE>",
    "\">\"",
    "<GE>",
    "\"~\"",
    "\"|\"",
    "\"<<<\"",
    "\"->\"",
    "\"<->\"",
    "<LRECBRACE>",
    "<RRECBRACE>",
    "\"<--\"",
    "\"$\"",
    "\"$(\"",
    "\"~!@\"",
    "\"@!~\"",
    "\"from\"",
    "\"envelope\"",
    "\"security\"",
    "\"checked\"",
    "\"prio\"",
    "\"<-\"",
    "\"<~\"",
    "\":=\"",
    "\"_\"",
    "\"::\"",
    "\".*\"",
    "\"@=\"",
    "\"\\\\=\"",
    "<MOREL>",
    "<NONE>",
    "<METHODLY1>",
    "<METHODLY2>",
    "\"table\"",
    "\"key\"",
    "\"%\"",
    "\"%(\"",
    "<FIRST>",
    "<QIF>",
    "\"%after\"",
    "\"%list\"",
    "\"%[\"",
    "\"%count\"",
    "\"%rev\"",
    "<EVERY>",
    "<SOME>",
    "\"%sort\"",
    "\"%table\"",
    "\"%group\"",
    "\"valof\"",
    "\"component\"",
    "\"class\"",
    "\"pure\"",
    "\"def\"",
    "\"object\"",
    "\"extends\"",
    "\"this\"",
    "\"new\"",
    "\"spawn\"",
    "\"initially\"",
    "\"it\"",
    "\"reinit\"",
    "\"stable\"",
    "\"sync\"",
    "\"async\"",
    "\"serve\"",
    "\"before\"",
    "\"after\"",
    "\"body\"",
    "\"own\"",
    "\"as\"",
    "\"alias\"",
    "\"import\"",
    "<NOT>",
    "\"super\"",
    "\"map\"",
    "\"ord\"",
    "\"module\"",
    "\"public\"",
    "\"private\"",
    "\"member\"",
    "\"break\"",
    "\"continue\"",
    "\"fun\"",
    "\"fn\"",
    "\"throw\"",
    "\"try\"",
    "\"catch\"",
    "\"finally\"",
    "\"null\"",
    "\"true\"",
    "\"false\"",
    "\"&&\"",
    "\"||\"",
    "\"^^\"",
    "<IDIV>",
    "\"mod\"",
    "\"var\"",
    "\"val\"",
    "\"bard\"",
    "\"match\"",
    "\"if\"",
    "\"unless\"",
    "\"else\"",
    "\"for\"",
    "\"while\"",
    "\"signature\"",
    "\"do\"",
    "\"until\"",
    "\"return\"",
    "<RECV>",
    "\"timeout\"",
    "\"javaly\"",
    "<ALPHA>",
    "<HEXINT>",
    "<OCTINT>",
    "<BININT>",
    "<ID_MID>",
    "<ID1>",
    "<ID2>",
    "<CLOSE_ID>",
    "<INT>",
    "<FLOAT>",
    "<STRING2>",
    "<STRING1>",
    "<STRING4>",
    "<STRING3>",
    "\"<@\"",
    "\"@>\"",
    "\"[@\"",
    "\"@]\"",
  };

}
