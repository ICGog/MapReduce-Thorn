/* Generated By:JavaCC: Do not edit this line. JsonParser.java */
package fisher.parser.json;
import java.util.*;
import fisher.runtime.*;
import static fisher.util.Bard.*;
import fisher.util.FisherException;

public class JsonParser implements JsonParserConstants {

  public static String internalize(String s) {
    StringBuffer sb = new StringBuffer();
    int slen = s.length() - 1; // Skip final quote
    for(int i = 1; i < slen; i++) { // start from 1 to skip leading quote
      char c = s.charAt(i);
      if (c != '\\') sb.append(c);
      else {
        i++;
        if (i >= slen ) {sb.append('\\'); break;}
        char d = s.charAt(i);
        switch(d) {
          case '\"' : sb.append(d); break;
          case '/' : sb.append(d); break;
          case '\\' : sb.append(d); break;
          case 'b' : sb.append("\b"); break;
          case 'f' : sb.append("\f"); break;
          case 'n' : sb.append("\n"); break;
          case 'r' : sb.append("\r"); break;
          case 't' : sb.append("\t"); break;
          case 'u' : // precisely 4 hex digits
               char d1 = '0';
               char d2 = '0';
               char d3 = '0';
               char d4 = '0';
               if (i+1 == slen) { // \ u
               }
               else if (i+2 == slen) { // \ ua
                 d4 = s.charAt(i+1);   // 'a'
                 i = slen;
               }
               else if (i+3 == slen) { // \ uab
                 d3 = s.charAt(i+1);   // 'a'
                 d4 = s.charAt(i+2);   // 'b'
                 i = slen;
               }
               else if (i+4 == slen) { // \ uabc
                 d2 = s.charAt(i+1);   // 'a'
                 d3 = s.charAt(i+2);   // 'b'
                 d4 = s.charAt(i+3);   // 'c'
                 i = slen;
               }
               else {                  // \ uabcd -- like the spec says
                 d1 = s.charAt(i+1);   // 'a'
                 d2 = s.charAt(i+2);   // 'b'
                 d3 = s.charAt(i+3);   // 'c'
                 d4 = s.charAt(i+4);   // 'd'
                 i += 4;
               }
               int n = Integer.parseInt("" + d1 + d2 + d3 + d4, 16);
               // Now, add 1 or 2 chars, as proper for Unicode, to sb
               char[] chars = Character.toChars(n);
               sb.append(chars);
               break;
           default: sb.append(d); break;
        }//switch
      }// else
    }//for
    return sb.toString();
  }

  static final public Thing value() throws ParseException {
    Token t;
    Thing th;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      th = Stringle();
                    {if (true) return th;}
      break;
    case MINUS:
    case DIGITS:
      th = Number();
                  {if (true) return th;}
      break;
    case TRUE:
      jj_consume_token(TRUE);
           {if (true) return BoolTh.True;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
            {if (true) return BoolTh.False;}
      break;
    case NULL:
      jj_consume_token(NULL);
           {if (true) return null;}
      break;
    case LBRACKET:
      th = Array();
                 {if (true) return th;}
      break;
    case LBRACE:
      th = Record();
                  {if (true) return th;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////value
  static final public Thing Stringle() throws ParseException {
    Token t;
    t = jj_consume_token(STRING);
                 {if (true) return StringTh.of(internalize(t.image));}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Stringle
  static final public Thing Record() throws ParseException {
    List<String> fieldNames = null;
    List<Thing> stuff = null;
    Thing th;
    Thing fn;
    jj_consume_token(LBRACE);
     fieldNames = new ArrayList<String>();
     stuff = new ArrayList<Thing>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      fn = Stringle();
      jj_consume_token(COLON);
      th = value();
                                              fieldNames.add(fn.toString()); stuff.add(th);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        fn = Stringle();
        jj_consume_token(COLON);
        th = value();
                                                fieldNames.add(fn.toString()); stuff.add(th);
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
    try {
      {if (true) return RecordTh.make(fisher.eval.Evaller.lastSyntax(), fieldNames, stuff);}
    }
    catch (FisherException fe) {
      {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////Record
  static final public Thing Array() throws ParseException {
    List<Thing> els;
    Thing th;
    jj_consume_token(LBRACKET);
   els = new ArrayList<Thing>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case TRUE:
    case FALSE:
    case NULL:
    case DIGITS:
    case LBRACKET:
    case LBRACE:
    case STRING:
      th = value();
                  els.add(th);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        th = value();
                    els.add(th);
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
   {if (true) return ListTh.fromJavaList(els);}
    throw new Error("Missing return statement in function");
  }

 //////////////////////Array
  static final public Thing Number() throws ParseException {
    Token intt;
    Token frac = null;
    Token exp = null;
    boolean negative = false;
    boolean negExp = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
             negative = true;
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    intt = jj_consume_token(DIGITS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      frac = jj_consume_token(DIGITS);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case E:
      jj_consume_token(E);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
               negExp = true;
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      exp = jj_consume_token(DIGITS);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    if (frac == null && exp == null) {
       long I = Long.parseLong(intt.image);
       {if (true) return IntTh.of(negative ? -I : I);}
    }
    else {
       String numstr =
         intt
         +
         "." + (frac == null ? "0" : frac.image)
         +
         "e" + (negExp ? "-" : "")
             + (exp == null ? "0" : exp.image)
         ;
         double D = Double.parseDouble(numstr);
         {if (true) return FloatTh.of(negative ? -D : D);}
    }
    throw new Error("Missing return statement in function");
  }

 //////////////////////Number
  static final public Thing JSON() throws ParseException {
    Thing th;
    th = value();
   {if (true) return th;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public JsonParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xabc40,0x100,0x80000,0x100,0xabc40,0x40,0x80,0x60,0x60,0x4000,};
   }

  public JsonParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public JsonParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JsonParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public JsonParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JsonParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public JsonParser(JsonParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public void ReInit(JsonParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[20];
    for (int i = 0; i < 20; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

   //

}
