module HTTP {
  javaly class StringSocketeer = fisher.runtime.lib.socketeer.StringSocketeer {
    new StringSocketeer(port);
  }
  javaly class ReplySocket = fisher.runtime.lib.socketeer.ReplySocketTh {
    def `<<<`(x) = send;
  }
  javaly fun siteForStrings(nodeName, port) = fisher.runtime.lib.SiteForStrings.create;
  
  javaly class HTTPSocketeer = fisher.runtime.lib.http.HTTPSocketeer {
    new HTTPSocketeer(port);
  }
  
  javaly class HTTPRequest(verb, params, resource) = fisher.runtime.lib.http.HTTPRequest {
    def verb() = verb;
    def protocol() = protocol;
    def resource() = resource;
    def params() = params;
    def buildResponse(rcPlusMean, content, extraHeaders) = buildResponse;
    def respond(rcPlusMean, content, extraHeaders) = respond;
  }
  
  HTTP_404 = {: code: 404, meaning: "Not Found" :};
  OK =       {: code: 200, meaning: "OK" :};
  
}

module XML {
  javaly class Elem(tag, attrs, children) = fisher.runtime.lib.Elem {
    def tag() = tag;
    def attrs() = attrs;
    def children() = children;
    def str(ctrl) =  str;
    new XML(tag, attrs, children);
  }
  javaly fun parseXML(source) = fisher.runtime.lib.XMLFuns.parse;
}

module HTML {
  import XML.*;
  fun aslist(s:string) = [s];
    | aslist(s:list)   = s;
    | aslist(s:Elem)   = [s];
    | aslist(s)        = [s.str()];
  fun p(text) = Elem("p", {::}, aslist(text));
  fun i(text) = Elem("i", {::}, aslist(text));
//  fun @(text) = Elem("@", {::}, aslist(text));
  fun li(text) = Elem("li", {::}, aslist(text));
  fun ol(text) = Elem("ol", {::}, aslist(text));
  fun ul(text) = Elem("ul", {::}, aslist(text));
  fun td(text) = Elem("td", {::}, aslist(text));
  fun tr(text) = Elem("tr", {::}, aslist(text));
  fun form(attrs, bod) = Elem("form", attrs, aslist(bod));
  fun radio(name, value, bod) = Elem("input", {: name, value, type:"radio":}, aslist(bod));
  fun html(head, bod) = Elem("html",{::}, 
     [Elem("head", {::}, head), Elem("body", {::}, bod)]);
  fun column(items) = ol( %[li(x) | for x <- aslist(items)] );
  fun submit(s) = Elem("input", {: type:"submit", value:s :}, []);
}

  
module QUIZ {
  import XML.*;
  import HTML.*;  

  class Response(){
    def responseText() = (throw "Abstract method";);
  }
  
  byNum = table(num){map v;};
 
  class Numbered{
    num = byNum.num;
    def init() { 
      byNum(this.name) := {: v:this :};
    }
    def name = "n" + num;
  }Numbered
  
  class Answer(text) extends Numbered {
    def respond(r:Response) {}
    def str() = text.str + "[" + this.num + "]";
    def html(q) = radio(q.name, this.name, text);
  }
  
  class Question(question_text, answers) extends Numbered {
    def str = "$question_text [" + this.num + "]";
    def html() {
      pp = 
        [question_text, 
        column(%[ ans.html(this) | for ans <- answers ])];
//      println("pp=$pp");
      return p(pp);
    }
  }
  
  class Quiz(questions) extends Numbered {
    def str = "Quiz[" + this.num + "]";
    def html() = html([], form(
          {: name:"input", method:"get", action:"" :}, 
          %[q.html | for q <- questions]
          @ [submit("Submit to investigation!")] 
          ));
  }

}QUIZ

module ROBO_QUIZ {
  import QUIZ.*;
  class RoboResponse extends Response {
    var textBits := [];
    def responseText() = "You are a " + (textBits.and) + " robot.";
  }
  class RoboAnswer(text, responseBit) extends Answer(text) {
    def respond(r:Response) {
      super.respond(r);
      if (r :? RoboResponse) {
         r.textBits ::= responseBit;
      }
      else throw "I only deal with RoboResponses.";
    }
  }

fun makeRoboQuiz() {
  q1 = Question("What color is your hair?", 
    [
      RoboAnswer("shiny", "shiny-haired"),
      RoboAnswer("mauve", "mauve-haired"),
    ]);
  q2 = Question("What is your power source?",
    [
      RoboAnswer("water", "water-powered"),
      RoboAnswer("coal",  "steam-powered"),
      RoboAnswer("uranium", "nuclear-powered"),
    ]);
  
  Quiz([q1, q2 ]);
}
}ROBO_QUIZ

module BEE_QUIZ {
  import QUIZ.*;
  class BeeResponse extends Response {
     var queeniness := 0;
     var droniness := 0;
     var workiness := 0;
     def responseText() {
        choices =    
           %["queen" | if queeniness >= droniness && queeniness >= workiness]
           @
           %["drone" | if droniness >= queeniness && droniness >= workiness]
           @
           %["worker" | if workiness >= droniness && workiness >= queeniness]
           ;
        conclusion =
          (match (choices) {
             [c] => "You are definitely a $c."
           | [c,d] => "You could be a $c or a $d."
           | _ => "From those answers, we can't tell what sort of adult bee you are."
           });
         conclusion;
     }
  }BeeResponse
  
  class BeeAnswer(text, voter) extends Answer(text) {
     def respond(r:Response) {
       super.respond(r);
       if (r :? BeeResponse) {
          voter(r);
       }
       else throw "I only deal with BeeResponses";
     }
  }
  
  fun drone(r:BeeResponse) {r.droniness += 1; }
  fun queen(r:BeeResponse) {r.queeniness += 1; }
  fun worker(r:BeeResponse){r.workiness += 1;}
  fun q_w(r:BeeResponse) { queen(r); worker(r); }
  fun q_d(r:BeeResponse) { worker(r); drone(r); }
  fun w_d(r:BeeResponse)  { queen(r); drone(r); }
  fun dunno(r:BeeResponse){ queen(r); worker(r); drone(r); }

fun makeBeeQuiz() {
  
  Quiz([
    Question("What sex are you?",
      [ BeeAnswer("Male", drone),
        BeeAnswer("Female", q_w),
        BeeAnswer("Definitely not male", worker),
        BeeAnswer("It hardly matters", worker)
      ]),
    Question("Have you ever killed anyone?",
      [ BeeAnswer("yes", queen),
        BeeAnswer("yes, but I died too", worker),
        BeeAnswer("no",  dunno) ]), // drones don't, workers die if they try, and queens might not
    Question("How many children do you have",
      [ BeeAnswer("none", w_d),
        BeeAnswer("only a couple", worker), // workers can lay drones.
        BeeAnswer("lots and lots!", queen),
        BeeAnswer("Lots, but I died before they were laid", drone)
        ]),
    Question("Do you visit flowers?",
      [ BeeAnswer("yes", worker),
        BeeAnswer("no", dunno) ]),
    Question("Did you get a special diet as a child (all the way through)?",
      [ BeeAnswer("yes", queen),
        BeeAnswer("no", w_d) ]),
    Question("Do you like to dance?",
      [ BeeAnswer("yes", worker),
        BeeAnswer("no", q_d) ]),
    Question("What's your sex life like?",
      [ BeeAnswer("I'm gonna get lucky today!  I know!", drone),
        BeeAnswer("I was a wild girl, but now I've settled down to raise a family", queen),
        BeeAnswer("Eternal virgin!", worker)]),
  ]);
}


}
