// This example shows 1 FS component, 1 security provider component, 1 good user of the FS, and 1 malicious user of the FS.
// The malicious user inits itself as a security provider and creates a token with the same capability as the legitimate user.
// Since the FS doesn't trust anything but the SP security provider, it doesn't trust the token from the malicious user


module SECURITYPROVIDER {
  javaly fun make_token(msg, k, c) = fisher.runtime.`security`.SecurityProviderModule.makeToken;
  javaly fun init_sp() = fisher.runtime.`security`.SecurityProviderModule.initSecurityProvider;
  javaly fun gen_new_cap(granter) = fisher.runtime.`security`.SecurityProviderModule.generateNewCapability;
  javaly fun gen_and_grant(granter, c) = fisher.runtime.`security`.SecurityProviderModule.generateAndGrantNewCapability;
  javaly fun grant(granter, k, c) = fisher.runtime.`security`.SecurityProviderModule.grantCapability;
  javaly fun grantIfOwned(granter, k, c) = fisher.runtime.`security`.SecurityProviderModule.grantCapabilityOnlyIfOwned;
  javaly fun trust(spRef) = fisher.runtime.`security`.SecurityProviderModule.trust;
}module

spawn full_security_provider_01 {
  body {
    SP = spawn SP {
      body {
        import SECURITYPROVIDER.*;
        init_sp();
        try {
          while (true) {
            recv {
              {: grant:"grant", c: c, k: k :} from y => {
                grant(y, k, c);
                c <<< {: capability:"capability", k:k :};
	          }
	          | {: make_token:"make_token", msg, capability :} from y => {
	             t = make_token(msg, capability, y);
	             y <<< t;
	          }
	        }recv
	      }while
        }try
        catch {
          Z => {println("Security Violation! $Z!");}
        }catch
      }body
    }SP;
    
    FS = spawn FS {
      body {
        import SECURITYPROVIDER.*;
        trust(SP);
        while (true) {
          try {
            recv {
              {: login:"login", action:a, user:u, pass:p, compID:cID :} from y => {
                //check the user cred
                //check the component cred
                //if they are both good for action a, then grant the capability
                SP <<< {: grant:"grant", c: y, k: "write_cap" :};
              }
              | x from y envelope e && it.securityInfo ~ +si checked => {
                for (st <- si) {
                  t = st.k;
                  if (t == "write_cap") {
                    println("going to write: $x");
                  }
                }
              }
            }recv
          } catch {
            z => { 
              println("security violation: $z");
            }
          }
        }while
      }body
    }FS;
    
    A = spawn A {
      body {
        import SECURITYPROVIDER.*;
        trustedSPs = [SP];
        for (sp <- trustedSPs) {
          trust(sp);
        }
        FS <<< {: login:"login", action:"write to a.txt", user:"bob", pass:"pass", compID:thisComp() :};
        recv {
          {: capability:"capability", k:k :} from y => {
            if (y in trustedSPs) {
              message = "do something";
              y <<< {: make_token:"make_token", msg:message, capability:k :};
              recv {
                t from y2 => {
                  FS <<< message security [t];
                }
              }recv
            }
          }
        }recv
      }body
    }A;
    
    C = spawn C {
      body {
        import SECURITYPROVIDER.*;
        trust(thisComp());
        init_sp();
        FS <<< "do something evil";
        grant(thisComp(), "write_cap", thisComp());
        FS <<< "do something more evil" security[make_token("do something more evil", "write_cap", thisComp())];
      }body
    }C;
  }body
};