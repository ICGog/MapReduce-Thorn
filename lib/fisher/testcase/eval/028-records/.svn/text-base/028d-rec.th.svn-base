{
  fun cons(car, cdr) = <car, cdr>;
  nil = 'Yo, nil!';
  wrong = "WRONG!";
  
  fun nth(0, <car>) = car;
    | nth(n, <cdr>) = nth(n-1, cdr);
    | nth(n, $(nil)) = wrong;

  l3 = cons(3, nil);
  l23 = cons(2, l3);
  l123 = cons(1, l23);

  ~!@eq(nth(0, l123), 1)@!~  ;
  ~!@eq(nth(1, l123), 2)@!~  ;
  ~!@eq(nth(2, l123), 3)@!~  ;
  
  fun mip(f, $(nil)) = nil;
    | mip(f, <car, cdr>) = <car= f(car), cdr= mip(f, cdr)>;

  fun toLi( $(nil) ) = []; 
    | toLi( <car, cdr> ) = [car, toLi(cdr)...];

  ~!@eq(toLi(nil), [])@!~  ;
  ~!@eq(toLi(l3), [3])@!~  ;
  ~!@eq(toLi(l23), [2,3])@!~  ;
  ~!@eq(toLi(l123), [1,2,3])@!~  ;
  
   sq = fn(n) = n*n; 
   
  
  ~!@eq(toLi(mip(sq,nil)), [])@!~  ;
  ~!@eq(toLi(mip(sq,l3)), [9])@!~  ;
  ~!@eq(toLi(mip(sq,l23)), [4,9])@!~  ;
  ~!@eq(toLi(mip(sq,l123)), [1,4,9])@!~  ;

  fun rev(L) = rev2(L, nil);
  fun rev2($(nil), R) = R; 
    | rev2(<car, cdr>, R) = rev2(cdr, cons(car, R));

  ~!@eq(toLi(rev(l123)), [3,2,1])@!~  ;




}
