{
  ~!@assert([].subset([]))@!~  ;
  ~!@assert([].subset([1]))@!~  ;
  ~!@assert([].subset([1,2]))@!~  ;
  ~!@assert([1].subset([1]))@!~  ;
  ~!@assert([1].subset([1,2]))@!~  ;
  ~!@assert(not([1,2].subset([1])))@!~  ;
  ~!@assert(not([1,2].subset([])))@!~  ;
  ~!@assert(not([1,2].subset([1,3])))@!~  ;

  ~!@assert([].setEq([]))@!~  ;
  ~!@assert([1].setEq([1]))@!~  ;
  ~!@assert([1,1,1,1].setEq([1]))@!~  ;
  ~!@assert([1,2,2,1].setEq([1,2]))@!~  ;
  ~!@assert(not([1,2].setEq([])))@!~  ;
  ~!@assert(not([1,2].setEq([1])))@!~  ;
  ~!@assert(not([1,2].setEq([1,3,2])))@!~  ;
  ~!@assert(not([1,2].setEq([1,3])))@!~  ;
  
  fun untest(a,b,c) {
     ~!@assert( (a.union(b)) . setEq(c), a,b,c );
  }
  untest([], [], []);
  untest([], [1], [1]);
  untest([1], [1], [1]);
  untest([1], [], [1]);
  untest([1,2], [], [1,2]);
  untest([1], [2], [1,2]);
  untest([1], [1,2], [1,2]);
  untest([1], [1,2,2], [1,2]);

  
  fun intest(a,b,c) {
     ~!@assert( (a.intersect(b)) . setEq(c), a,b,c );
  }
  
  intest([], [], []);
  intest([], [1,2], []);
  intest([1], [1], [1]);
  intest([1,2], [1], [1]);
  intest([1,2], [1,3], [1]);
  intest([1,2], [1,2,3], [1,2]);

  ~!@eq([].minus([1]), [])@!~  ;
  ~!@eq([2].minus([1]), [2])@!~  ;
  ~!@eq([1,2].minus([1]), [2])@!~  ;
  ~!@eq([1,2,1,1].minus([1]), [2])@!~  ;
  ~!@eq([1,2,1,2,1].minus([1]), [2,2])@!~  ;
  ~!@eq([1,2,1,3,1,4].minus([1]), [2,3,4])@!~  ;
}
