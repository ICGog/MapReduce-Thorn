{
  ~!@eq([].reversed(),[])@!~  ;
  ~!@eq([].reverse(),[])@!~  ;
  ~!@eq([1].reversed(),[1])@!~  ;
  ~!@eq([1].reverse(),[1])@!~  ;
  ~!@eq([1,2].reversed(),[2,1])@!~  ;
  ~!@eq([1,2].reverse(),[2,1])@!~  ;

  ~!@eq([].len(),0)@!~  ;
  ~!@eq([1].len(),1)@!~  ;
  ~!@eq([1,2].len(),2)@!~  ;
  ~!@eq([1,2,3].len(),3)@!~  ;

  ~!@eq([].num(),0)@!~  ;
  ~!@eq([1].num(),1)@!~  ;
  ~!@eq([1,2].num(),2)@!~  ;
  ~!@eq([1,2,3].num(),3)@!~  ;

  ~!@eq([].str(),"[]")@!~  ;
  ~!@eq([1].str(),"[1]")@!~  ;
  ~!@eq([1,2].str(),"[1, 2]")@!~  ;

  fun checkRange(L, n) {
     ~!@eq(L.range(), 0 .. n-1);
     ~!@eq(L.num(), L.len(), n);
  }  

  checkRange([], 0);
  checkRange([1], 1);
  checkRange([1,2], 2);
  checkRange([1,2,3], 3);

  ~!@eq([].flat(), [])@!~  ;
  ~!@eq([1].flat(), [1])@!~  ;
  ~!@eq([[1]].flat(), [1])@!~  ;
  ~!@eq([[], [[[1]],[],[[]],[[[]]]]].flat(), [1])@!~  ;
  ~!@eq([1,2,3].flat(), [1,2,3])@!~  ;
  ~!@eq([[1,2],3].flat(), [1,2,3])@!~  ;
  ~!@eq([[1,[[2]],3]].flat(), [1,2,3])@!~  ;

  l = [11,22,33];
  for (i <- 1 .. 1000) {
    r = l.rand();
    unless(r == 11 || r == 22 || r == 33) { ~!@hit()@!~ 0 ; }
  }

  ~!@eq([].unique(), [])@!~  ;
  ~!@eq([1].unique(), [1])@!~  ;
  ~!@eq([1,1,1,1,1].unique(), [1])@!~  ;


  ~!@eq([].joined("!"), "")@!~  ;  
  ~!@eq([1].joined("!"), "1")@!~  ;  
  ~!@eq([1,2].joined("!"), "1!2")@!~  ;  
  ~!@eq([1,2,3].joined("!"), "1!2!3")@!~  ;  

  ~!@eq([].and(), "")@!~  ;
  ~!@eq([1].and(), "1")@!~  ;
  ~!@eq([1,2].and(), "1 and 2")@!~  ;
  ~!@eq([1,2,3].and(), "1, 2, and 3")@!~  ;
  ~!@eq([1,2,3,4].and(), "1, 2, 3, and 4")@!~  ;

}
